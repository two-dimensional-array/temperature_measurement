
temperature_measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003430  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  0800362c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  0800362c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062d6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a91  00000000  00000000  0002636f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  00027e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  000285a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173c5  00000000  00000000  00028c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c2c  00000000  00000000  0004003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ab6  00000000  00000000  00048c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb71f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f0  00000000  00000000  000cb770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003524 	.word	0x08003524

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003524 	.word	0x08003524

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_frsub>:
 80004d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__addsf3>
 80004da:	bf00      	nop

080004dc <__aeabi_fsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004e0 <__addsf3>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	bf1f      	itttt	ne
 80004e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004e8:	ea92 0f03 	teqne	r2, r3
 80004ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f4:	d06a      	beq.n	80005cc <__addsf3+0xec>
 80004f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004fe:	bfc1      	itttt	gt
 8000500:	18d2      	addgt	r2, r2, r3
 8000502:	4041      	eorgt	r1, r0
 8000504:	4048      	eorgt	r0, r1
 8000506:	4041      	eorgt	r1, r0
 8000508:	bfb8      	it	lt
 800050a:	425b      	neglt	r3, r3
 800050c:	2b19      	cmp	r3, #25
 800050e:	bf88      	it	hi
 8000510:	4770      	bxhi	lr
 8000512:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000516:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800051a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000526:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800052a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800052e:	bf18      	it	ne
 8000530:	4249      	negne	r1, r1
 8000532:	ea92 0f03 	teq	r2, r3
 8000536:	d03f      	beq.n	80005b8 <__addsf3+0xd8>
 8000538:	f1a2 0201 	sub.w	r2, r2, #1
 800053c:	fa41 fc03 	asr.w	ip, r1, r3
 8000540:	eb10 000c 	adds.w	r0, r0, ip
 8000544:	f1c3 0320 	rsb	r3, r3, #32
 8000548:	fa01 f103 	lsl.w	r1, r1, r3
 800054c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000550:	d502      	bpl.n	8000558 <__addsf3+0x78>
 8000552:	4249      	negs	r1, r1
 8000554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000558:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800055c:	d313      	bcc.n	8000586 <__addsf3+0xa6>
 800055e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000562:	d306      	bcc.n	8000572 <__addsf3+0x92>
 8000564:	0840      	lsrs	r0, r0, #1
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	f102 0201 	add.w	r2, r2, #1
 800056e:	2afe      	cmp	r2, #254	; 0xfe
 8000570:	d251      	bcs.n	8000616 <__addsf3+0x136>
 8000572:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057a:	bf08      	it	eq
 800057c:	f020 0001 	biceq.w	r0, r0, #1
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	4770      	bx	lr
 8000586:	0049      	lsls	r1, r1, #1
 8000588:	eb40 0000 	adc.w	r0, r0, r0
 800058c:	3a01      	subs	r2, #1
 800058e:	bf28      	it	cs
 8000590:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000594:	d2ed      	bcs.n	8000572 <__addsf3+0x92>
 8000596:	fab0 fc80 	clz	ip, r0
 800059a:	f1ac 0c08 	sub.w	ip, ip, #8
 800059e:	ebb2 020c 	subs.w	r2, r2, ip
 80005a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005a6:	bfaa      	itet	ge
 80005a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ac:	4252      	neglt	r2, r2
 80005ae:	4318      	orrge	r0, r3
 80005b0:	bfbc      	itt	lt
 80005b2:	40d0      	lsrlt	r0, r2
 80005b4:	4318      	orrlt	r0, r3
 80005b6:	4770      	bx	lr
 80005b8:	f092 0f00 	teq	r2, #0
 80005bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005c0:	bf06      	itte	eq
 80005c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005c6:	3201      	addeq	r2, #1
 80005c8:	3b01      	subne	r3, #1
 80005ca:	e7b5      	b.n	8000538 <__addsf3+0x58>
 80005cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d4:	bf18      	it	ne
 80005d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005da:	d021      	beq.n	8000620 <__addsf3+0x140>
 80005dc:	ea92 0f03 	teq	r2, r3
 80005e0:	d004      	beq.n	80005ec <__addsf3+0x10c>
 80005e2:	f092 0f00 	teq	r2, #0
 80005e6:	bf08      	it	eq
 80005e8:	4608      	moveq	r0, r1
 80005ea:	4770      	bx	lr
 80005ec:	ea90 0f01 	teq	r0, r1
 80005f0:	bf1c      	itt	ne
 80005f2:	2000      	movne	r0, #0
 80005f4:	4770      	bxne	lr
 80005f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005fa:	d104      	bne.n	8000606 <__addsf3+0x126>
 80005fc:	0040      	lsls	r0, r0, #1
 80005fe:	bf28      	it	cs
 8000600:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000604:	4770      	bx	lr
 8000606:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800060a:	bf3c      	itt	cc
 800060c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000610:	4770      	bxcc	lr
 8000612:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000616:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	4770      	bx	lr
 8000620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000624:	bf16      	itet	ne
 8000626:	4608      	movne	r0, r1
 8000628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800062c:	4601      	movne	r1, r0
 800062e:	0242      	lsls	r2, r0, #9
 8000630:	bf06      	itte	eq
 8000632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000636:	ea90 0f01 	teqeq	r0, r1
 800063a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800063e:	4770      	bx	lr

08000640 <__aeabi_ui2f>:
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	e004      	b.n	8000650 <__aeabi_i2f+0x8>
 8000646:	bf00      	nop

08000648 <__aeabi_i2f>:
 8000648:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	ea5f 0c00 	movs.w	ip, r0
 8000654:	bf08      	it	eq
 8000656:	4770      	bxeq	lr
 8000658:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800065c:	4601      	mov	r1, r0
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	e01c      	b.n	800069e <__aeabi_l2f+0x2a>

08000664 <__aeabi_ul2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e00a      	b.n	8000688 <__aeabi_l2f+0x14>
 8000672:	bf00      	nop

08000674 <__aeabi_l2f>:
 8000674:	ea50 0201 	orrs.w	r2, r0, r1
 8000678:	bf08      	it	eq
 800067a:	4770      	bxeq	lr
 800067c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000680:	d502      	bpl.n	8000688 <__aeabi_l2f+0x14>
 8000682:	4240      	negs	r0, r0
 8000684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000688:	ea5f 0c01 	movs.w	ip, r1
 800068c:	bf02      	ittt	eq
 800068e:	4684      	moveq	ip, r0
 8000690:	4601      	moveq	r1, r0
 8000692:	2000      	moveq	r0, #0
 8000694:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000698:	bf08      	it	eq
 800069a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800069e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006a2:	fabc f28c 	clz	r2, ip
 80006a6:	3a08      	subs	r2, #8
 80006a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ac:	db10      	blt.n	80006d0 <__aeabi_l2f+0x5c>
 80006ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006b8:	f1c2 0220 	rsb	r2, r2, #32
 80006bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006c0:	fa20 f202 	lsr.w	r2, r0, r2
 80006c4:	eb43 0002 	adc.w	r0, r3, r2
 80006c8:	bf08      	it	eq
 80006ca:	f020 0001 	biceq.w	r0, r0, #1
 80006ce:	4770      	bx	lr
 80006d0:	f102 0220 	add.w	r2, r2, #32
 80006d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e0:	fa21 f202 	lsr.w	r2, r1, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006ee:	4770      	bx	lr

080006f0 <__aeabi_fmul>:
 80006f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006f8:	bf1e      	ittt	ne
 80006fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006fe:	ea92 0f0c 	teqne	r2, ip
 8000702:	ea93 0f0c 	teqne	r3, ip
 8000706:	d06f      	beq.n	80007e8 <__aeabi_fmul+0xf8>
 8000708:	441a      	add	r2, r3
 800070a:	ea80 0c01 	eor.w	ip, r0, r1
 800070e:	0240      	lsls	r0, r0, #9
 8000710:	bf18      	it	ne
 8000712:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000716:	d01e      	beq.n	8000756 <__aeabi_fmul+0x66>
 8000718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800071c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000720:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000724:	fba0 3101 	umull	r3, r1, r0, r1
 8000728:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800072c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000730:	bf3e      	ittt	cc
 8000732:	0049      	lslcc	r1, r1, #1
 8000734:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000738:	005b      	lslcc	r3, r3, #1
 800073a:	ea40 0001 	orr.w	r0, r0, r1
 800073e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000742:	2afd      	cmp	r2, #253	; 0xfd
 8000744:	d81d      	bhi.n	8000782 <__aeabi_fmul+0x92>
 8000746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800074a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800074e:	bf08      	it	eq
 8000750:	f020 0001 	biceq.w	r0, r0, #1
 8000754:	4770      	bx	lr
 8000756:	f090 0f00 	teq	r0, #0
 800075a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800075e:	bf08      	it	eq
 8000760:	0249      	lsleq	r1, r1, #9
 8000762:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000766:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800076a:	3a7f      	subs	r2, #127	; 0x7f
 800076c:	bfc2      	ittt	gt
 800076e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000772:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000776:	4770      	bxgt	lr
 8000778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	3a01      	subs	r2, #1
 8000782:	dc5d      	bgt.n	8000840 <__aeabi_fmul+0x150>
 8000784:	f112 0f19 	cmn.w	r2, #25
 8000788:	bfdc      	itt	le
 800078a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800078e:	4770      	bxle	lr
 8000790:	f1c2 0200 	rsb	r2, r2, #0
 8000794:	0041      	lsls	r1, r0, #1
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	f1c2 0220 	rsb	r2, r2, #32
 800079e:	fa00 fc02 	lsl.w	ip, r0, r2
 80007a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007a6:	f140 0000 	adc.w	r0, r0, #0
 80007aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ae:	bf08      	it	eq
 80007b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007b4:	4770      	bx	lr
 80007b6:	f092 0f00 	teq	r2, #0
 80007ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007be:	bf02      	ittt	eq
 80007c0:	0040      	lsleq	r0, r0, #1
 80007c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007c6:	3a01      	subeq	r2, #1
 80007c8:	d0f9      	beq.n	80007be <__aeabi_fmul+0xce>
 80007ca:	ea40 000c 	orr.w	r0, r0, ip
 80007ce:	f093 0f00 	teq	r3, #0
 80007d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d6:	bf02      	ittt	eq
 80007d8:	0049      	lsleq	r1, r1, #1
 80007da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007de:	3b01      	subeq	r3, #1
 80007e0:	d0f9      	beq.n	80007d6 <__aeabi_fmul+0xe6>
 80007e2:	ea41 010c 	orr.w	r1, r1, ip
 80007e6:	e78f      	b.n	8000708 <__aeabi_fmul+0x18>
 80007e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007ec:	ea92 0f0c 	teq	r2, ip
 80007f0:	bf18      	it	ne
 80007f2:	ea93 0f0c 	teqne	r3, ip
 80007f6:	d00a      	beq.n	800080e <__aeabi_fmul+0x11e>
 80007f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007fc:	bf18      	it	ne
 80007fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000802:	d1d8      	bne.n	80007b6 <__aeabi_fmul+0xc6>
 8000804:	ea80 0001 	eor.w	r0, r0, r1
 8000808:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800080c:	4770      	bx	lr
 800080e:	f090 0f00 	teq	r0, #0
 8000812:	bf17      	itett	ne
 8000814:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000818:	4608      	moveq	r0, r1
 800081a:	f091 0f00 	teqne	r1, #0
 800081e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000822:	d014      	beq.n	800084e <__aeabi_fmul+0x15e>
 8000824:	ea92 0f0c 	teq	r2, ip
 8000828:	d101      	bne.n	800082e <__aeabi_fmul+0x13e>
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	d10f      	bne.n	800084e <__aeabi_fmul+0x15e>
 800082e:	ea93 0f0c 	teq	r3, ip
 8000832:	d103      	bne.n	800083c <__aeabi_fmul+0x14c>
 8000834:	024b      	lsls	r3, r1, #9
 8000836:	bf18      	it	ne
 8000838:	4608      	movne	r0, r1
 800083a:	d108      	bne.n	800084e <__aeabi_fmul+0x15e>
 800083c:	ea80 0001 	eor.w	r0, r0, r1
 8000840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000844:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000848:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800084c:	4770      	bx	lr
 800084e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000852:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000856:	4770      	bx	lr

08000858 <__aeabi_fdiv>:
 8000858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000860:	bf1e      	ittt	ne
 8000862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000866:	ea92 0f0c 	teqne	r2, ip
 800086a:	ea93 0f0c 	teqne	r3, ip
 800086e:	d069      	beq.n	8000944 <__aeabi_fdiv+0xec>
 8000870:	eba2 0203 	sub.w	r2, r2, r3
 8000874:	ea80 0c01 	eor.w	ip, r0, r1
 8000878:	0249      	lsls	r1, r1, #9
 800087a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800087e:	d037      	beq.n	80008f0 <__aeabi_fdiv+0x98>
 8000880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000884:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000888:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800088c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000890:	428b      	cmp	r3, r1
 8000892:	bf38      	it	cc
 8000894:	005b      	lslcc	r3, r3, #1
 8000896:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800089a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800089e:	428b      	cmp	r3, r1
 80008a0:	bf24      	itt	cs
 80008a2:	1a5b      	subcs	r3, r3, r1
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008ac:	bf24      	itt	cs
 80008ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ba:	bf24      	itt	cs
 80008bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008c8:	bf24      	itt	cs
 80008ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	bf18      	it	ne
 80008d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008da:	d1e0      	bne.n	800089e <__aeabi_fdiv+0x46>
 80008dc:	2afd      	cmp	r2, #253	; 0xfd
 80008de:	f63f af50 	bhi.w	8000782 <__aeabi_fmul+0x92>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e8:	bf08      	it	eq
 80008ea:	f020 0001 	biceq.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f8:	327f      	adds	r2, #127	; 0x7f
 80008fa:	bfc2      	ittt	gt
 80008fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000900:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000904:	4770      	bxgt	lr
 8000906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	3a01      	subs	r2, #1
 8000910:	e737      	b.n	8000782 <__aeabi_fmul+0x92>
 8000912:	f092 0f00 	teq	r2, #0
 8000916:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800091a:	bf02      	ittt	eq
 800091c:	0040      	lsleq	r0, r0, #1
 800091e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000922:	3a01      	subeq	r2, #1
 8000924:	d0f9      	beq.n	800091a <__aeabi_fdiv+0xc2>
 8000926:	ea40 000c 	orr.w	r0, r0, ip
 800092a:	f093 0f00 	teq	r3, #0
 800092e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000932:	bf02      	ittt	eq
 8000934:	0049      	lsleq	r1, r1, #1
 8000936:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800093a:	3b01      	subeq	r3, #1
 800093c:	d0f9      	beq.n	8000932 <__aeabi_fdiv+0xda>
 800093e:	ea41 010c 	orr.w	r1, r1, ip
 8000942:	e795      	b.n	8000870 <__aeabi_fdiv+0x18>
 8000944:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000948:	ea92 0f0c 	teq	r2, ip
 800094c:	d108      	bne.n	8000960 <__aeabi_fdiv+0x108>
 800094e:	0242      	lsls	r2, r0, #9
 8000950:	f47f af7d 	bne.w	800084e <__aeabi_fmul+0x15e>
 8000954:	ea93 0f0c 	teq	r3, ip
 8000958:	f47f af70 	bne.w	800083c <__aeabi_fmul+0x14c>
 800095c:	4608      	mov	r0, r1
 800095e:	e776      	b.n	800084e <__aeabi_fmul+0x15e>
 8000960:	ea93 0f0c 	teq	r3, ip
 8000964:	d104      	bne.n	8000970 <__aeabi_fdiv+0x118>
 8000966:	024b      	lsls	r3, r1, #9
 8000968:	f43f af4c 	beq.w	8000804 <__aeabi_fmul+0x114>
 800096c:	4608      	mov	r0, r1
 800096e:	e76e      	b.n	800084e <__aeabi_fmul+0x15e>
 8000970:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000974:	bf18      	it	ne
 8000976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800097a:	d1ca      	bne.n	8000912 <__aeabi_fdiv+0xba>
 800097c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000980:	f47f af5c 	bne.w	800083c <__aeabi_fmul+0x14c>
 8000984:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000988:	f47f af3c 	bne.w	8000804 <__aeabi_fmul+0x114>
 800098c:	e75f      	b.n	800084e <__aeabi_fmul+0x15e>
 800098e:	bf00      	nop

08000990 <__gesf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpsf2+0x4>
 8000996:	bf00      	nop

08000998 <__lesf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpsf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpsf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ba:	d011      	beq.n	80009e0 <__cmpsf2+0x40>
 80009bc:	b001      	add	sp, #4
 80009be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009c2:	bf18      	it	ne
 80009c4:	ea90 0f01 	teqne	r0, r1
 80009c8:	bf58      	it	pl
 80009ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ce:	bf88      	it	hi
 80009d0:	17c8      	asrhi	r0, r1, #31
 80009d2:	bf38      	it	cc
 80009d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d8:	bf18      	it	ne
 80009da:	f040 0001 	orrne.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e4:	d102      	bne.n	80009ec <__cmpsf2+0x4c>
 80009e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009ea:	d105      	bne.n	80009f8 <__cmpsf2+0x58>
 80009ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009f0:	d1e4      	bne.n	80009bc <__cmpsf2+0x1c>
 80009f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009f6:	d0e1      	beq.n	80009bc <__cmpsf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cfrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4608      	mov	r0, r1
 8000a04:	4661      	mov	r1, ip
 8000a06:	e7ff      	b.n	8000a08 <__aeabi_cfcmpeq>

08000a08 <__aeabi_cfcmpeq>:
 8000a08:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a0a:	f7ff ffc9 	bl	80009a0 <__cmpsf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a18 <__aeabi_fcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cfcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_fcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cfcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_fcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cfcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_fcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffd2 	bl	8000a00 <__aeabi_cfrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_fcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc8 	bl	8000a00 <__aeabi_cfrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_f2ulz>:
 8000a7c:	b5d0      	push	{r4, r6, r7, lr}
 8000a7e:	f7ff fcd1 	bl	8000424 <__aeabi_f2d>
 8000a82:	2200      	movs	r2, #0
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <__aeabi_f2ulz+0x38>)
 8000a86:	4606      	mov	r6, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	f000 f817 	bl	8000abc <__aeabi_dmul>
 8000a8e:	f000 f93f 	bl	8000d10 <__aeabi_d2uiz>
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fca4 	bl	80003e0 <__aeabi_ui2d>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <__aeabi_f2ulz+0x3c>)
 8000a9c:	f000 f80e 	bl	8000abc <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	f7ff fb5c 	bl	8000164 <__aeabi_dsub>
 8000aac:	f000 f930 	bl	8000d10 <__aeabi_d2uiz>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ab4:	3df00000 	.word	0x3df00000
 8000ab8:	41f00000 	.word	0x41f00000

08000abc <__aeabi_dmul>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ac2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ac6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aca:	bf1d      	ittte	ne
 8000acc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ad0:	ea94 0f0c 	teqne	r4, ip
 8000ad4:	ea95 0f0c 	teqne	r5, ip
 8000ad8:	f000 f8de 	bleq	8000c98 <__aeabi_dmul+0x1dc>
 8000adc:	442c      	add	r4, r5
 8000ade:	ea81 0603 	eor.w	r6, r1, r3
 8000ae2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000ae6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000aea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000aee:	bf18      	it	ne
 8000af0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000afc:	d038      	beq.n	8000b70 <__aeabi_dmul+0xb4>
 8000afe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000b02:	f04f 0500 	mov.w	r5, #0
 8000b06:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000b0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000b0e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000b12:	f04f 0600 	mov.w	r6, #0
 8000b16:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000b1a:	f09c 0f00 	teq	ip, #0
 8000b1e:	bf18      	it	ne
 8000b20:	f04e 0e01 	orrne.w	lr, lr, #1
 8000b24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000b28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000b2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000b30:	d204      	bcs.n	8000b3c <__aeabi_dmul+0x80>
 8000b32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000b36:	416d      	adcs	r5, r5
 8000b38:	eb46 0606 	adc.w	r6, r6, r6
 8000b3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000b40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000b44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000b48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000b4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000b50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b54:	bf88      	it	hi
 8000b56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b5a:	d81e      	bhi.n	8000b9a <__aeabi_dmul+0xde>
 8000b5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000b66:	f150 0000 	adcs.w	r0, r0, #0
 8000b6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000b74:	ea46 0101 	orr.w	r1, r6, r1
 8000b78:	ea40 0002 	orr.w	r0, r0, r2
 8000b7c:	ea81 0103 	eor.w	r1, r1, r3
 8000b80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000b84:	bfc2      	ittt	gt
 8000b86:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b8e:	bd70      	popgt	{r4, r5, r6, pc}
 8000b90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b94:	f04f 0e00 	mov.w	lr, #0
 8000b98:	3c01      	subs	r4, #1
 8000b9a:	f300 80ab 	bgt.w	8000cf4 <__aeabi_dmul+0x238>
 8000b9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000ba2:	bfde      	ittt	le
 8000ba4:	2000      	movle	r0, #0
 8000ba6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000baa:	bd70      	pople	{r4, r5, r6, pc}
 8000bac:	f1c4 0400 	rsb	r4, r4, #0
 8000bb0:	3c20      	subs	r4, #32
 8000bb2:	da35      	bge.n	8000c20 <__aeabi_dmul+0x164>
 8000bb4:	340c      	adds	r4, #12
 8000bb6:	dc1b      	bgt.n	8000bf0 <__aeabi_dmul+0x134>
 8000bb8:	f104 0414 	add.w	r4, r4, #20
 8000bbc:	f1c4 0520 	rsb	r5, r4, #32
 8000bc0:	fa00 f305 	lsl.w	r3, r0, r5
 8000bc4:	fa20 f004 	lsr.w	r0, r0, r4
 8000bc8:	fa01 f205 	lsl.w	r2, r1, r5
 8000bcc:	ea40 0002 	orr.w	r0, r0, r2
 8000bd0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000bd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000bdc:	fa21 f604 	lsr.w	r6, r1, r4
 8000be0:	eb42 0106 	adc.w	r1, r2, r6
 8000be4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000be8:	bf08      	it	eq
 8000bea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	f1c4 040c 	rsb	r4, r4, #12
 8000bf4:	f1c4 0520 	rsb	r5, r4, #32
 8000bf8:	fa00 f304 	lsl.w	r3, r0, r4
 8000bfc:	fa20 f005 	lsr.w	r0, r0, r5
 8000c00:	fa01 f204 	lsl.w	r2, r1, r4
 8000c04:	ea40 0002 	orr.w	r0, r0, r2
 8000c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c10:	f141 0100 	adc.w	r1, r1, #0
 8000c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
 8000c20:	f1c4 0520 	rsb	r5, r4, #32
 8000c24:	fa00 f205 	lsl.w	r2, r0, r5
 8000c28:	ea4e 0e02 	orr.w	lr, lr, r2
 8000c2c:	fa20 f304 	lsr.w	r3, r0, r4
 8000c30:	fa01 f205 	lsl.w	r2, r1, r5
 8000c34:	ea43 0302 	orr.w	r3, r3, r2
 8000c38:	fa21 f004 	lsr.w	r0, r1, r4
 8000c3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c40:	fa21 f204 	lsr.w	r2, r1, r4
 8000c44:	ea20 0002 	bic.w	r0, r0, r2
 8000c48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000c4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c50:	bf08      	it	eq
 8000c52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	f094 0f00 	teq	r4, #0
 8000c5c:	d10f      	bne.n	8000c7e <__aeabi_dmul+0x1c2>
 8000c5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000c62:	0040      	lsls	r0, r0, #1
 8000c64:	eb41 0101 	adc.w	r1, r1, r1
 8000c68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c6c:	bf08      	it	eq
 8000c6e:	3c01      	subeq	r4, #1
 8000c70:	d0f7      	beq.n	8000c62 <__aeabi_dmul+0x1a6>
 8000c72:	ea41 0106 	orr.w	r1, r1, r6
 8000c76:	f095 0f00 	teq	r5, #0
 8000c7a:	bf18      	it	ne
 8000c7c:	4770      	bxne	lr
 8000c7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000c82:	0052      	lsls	r2, r2, #1
 8000c84:	eb43 0303 	adc.w	r3, r3, r3
 8000c88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c8c:	bf08      	it	eq
 8000c8e:	3d01      	subeq	r5, #1
 8000c90:	d0f7      	beq.n	8000c82 <__aeabi_dmul+0x1c6>
 8000c92:	ea43 0306 	orr.w	r3, r3, r6
 8000c96:	4770      	bx	lr
 8000c98:	ea94 0f0c 	teq	r4, ip
 8000c9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ca0:	bf18      	it	ne
 8000ca2:	ea95 0f0c 	teqne	r5, ip
 8000ca6:	d00c      	beq.n	8000cc2 <__aeabi_dmul+0x206>
 8000ca8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cac:	bf18      	it	ne
 8000cae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cb2:	d1d1      	bne.n	8000c58 <__aeabi_dmul+0x19c>
 8000cb4:	ea81 0103 	eor.w	r1, r1, r3
 8000cb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cbc:	f04f 0000 	mov.w	r0, #0
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
 8000cc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cc6:	bf06      	itte	eq
 8000cc8:	4610      	moveq	r0, r2
 8000cca:	4619      	moveq	r1, r3
 8000ccc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cd0:	d019      	beq.n	8000d06 <__aeabi_dmul+0x24a>
 8000cd2:	ea94 0f0c 	teq	r4, ip
 8000cd6:	d102      	bne.n	8000cde <__aeabi_dmul+0x222>
 8000cd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000cdc:	d113      	bne.n	8000d06 <__aeabi_dmul+0x24a>
 8000cde:	ea95 0f0c 	teq	r5, ip
 8000ce2:	d105      	bne.n	8000cf0 <__aeabi_dmul+0x234>
 8000ce4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ce8:	bf1c      	itt	ne
 8000cea:	4610      	movne	r0, r2
 8000cec:	4619      	movne	r1, r3
 8000cee:	d10a      	bne.n	8000d06 <__aeabi_dmul+0x24a>
 8000cf0:	ea81 0103 	eor.w	r1, r1, r3
 8000cf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cf8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000cfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
 8000d06:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d0a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}

08000d10 <__aeabi_d2uiz>:
 8000d10:	004a      	lsls	r2, r1, #1
 8000d12:	d211      	bcs.n	8000d38 <__aeabi_d2uiz+0x28>
 8000d14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d18:	d211      	bcs.n	8000d3e <__aeabi_d2uiz+0x2e>
 8000d1a:	d50d      	bpl.n	8000d38 <__aeabi_d2uiz+0x28>
 8000d1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d24:	d40e      	bmi.n	8000d44 <__aeabi_d2uiz+0x34>
 8000d26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d32:	fa23 f002 	lsr.w	r0, r3, r2
 8000d36:	4770      	bx	lr
 8000d38:	f04f 0000 	mov.w	r0, #0
 8000d3c:	4770      	bx	lr
 8000d3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d42:	d102      	bne.n	8000d4a <__aeabi_d2uiz+0x3a>
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	4770      	bx	lr
 8000d4a:	f04f 0000 	mov.w	r0, #0
 8000d4e:	4770      	bx	lr

08000d50 <DHT11_Get_Data>:
#include "stm32f1xx_hal.h"

__STATIC_FORCEINLINE void Delay_MS(__IO uint32_t micros);

void DHT11_Get_Data(float* p_temperature, float* p_humidity)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint8_t buffer_data[5];

  // Set DHT11 pin on output mode.
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DHT11_PIN;
 8000d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d6e:	2311      	movs	r3, #17
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4894      	ldr	r0, [pc, #592]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000d7e:	f000 ff9f 	bl	8001cc0 <HAL_GPIO_Init>

  // Startup DHT11.
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d88:	4891      	ldr	r0, [pc, #580]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000d8a:	f001 f934 	bl	8001ff6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d8e:	2064      	movs	r0, #100	; 0x64
 8000d90:	f000 fc8e 	bl	80016b0 <HAL_Delay>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	488d      	ldr	r0, [pc, #564]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000d9c:	f001 f92b 	bl	8001ff6 <HAL_GPIO_WritePin>
  HAL_Delay(18);
 8000da0:	2012      	movs	r0, #18
 8000da2:	f000 fc85 	bl	80016b0 <HAL_Delay>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	4888      	ldr	r0, [pc, #544]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000dae:	f001 f922 	bl	8001ff6 <HAL_GPIO_WritePin>

  // Set DHT11 pin on input mode.
  GPIO_InitStruct.Pin = DHT11_PIN;
 8000db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4882      	ldr	r0, [pc, #520]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000dc8:	f000 ff7a 	bl	8001cc0 <HAL_GPIO_Init>
 8000dcc:	2327      	movs	r3, #39	; 0x27
 8000dce:	60fb      	str	r3, [r7, #12]
  }
}

__STATIC_FORCEINLINE void Delay_MS(__IO uint32_t micros)
{
  micros *= (SystemCoreClock / 1000000) / 9;
 8000dd0:	4b80      	ldr	r3, [pc, #512]	; (8000fd4 <DHT11_Get_Data+0x284>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a80      	ldr	r2, [pc, #512]	; (8000fd8 <DHT11_Get_Data+0x288>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	0ddb      	lsrs	r3, r3, #23
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	60fb      	str	r3, [r7, #12]
  while (micros--);
 8000de4:	bf00      	nop
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	60fa      	str	r2, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1fa      	bne.n	8000de6 <DHT11_Get_Data+0x96>
}
 8000df0:	bf00      	nop
  if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000df2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df6:	4876      	ldr	r0, [pc, #472]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000df8:	f001 f8e6 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 80df 	bne.w	8000fc2 <DHT11_Get_Data+0x272>
 8000e04:	2350      	movs	r3, #80	; 0x50
 8000e06:	613b      	str	r3, [r7, #16]
  micros *= (SystemCoreClock / 1000000) / 9;
 8000e08:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <DHT11_Get_Data+0x284>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a72      	ldr	r2, [pc, #456]	; (8000fd8 <DHT11_Get_Data+0x288>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	0ddb      	lsrs	r3, r3, #23
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	fb02 f303 	mul.w	r3, r2, r3
 8000e1a:	613b      	str	r3, [r7, #16]
  while (micros--);
 8000e1c:	bf00      	nop
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1e5a      	subs	r2, r3, #1
 8000e22:	613a      	str	r2, [r7, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1fa      	bne.n	8000e1e <DHT11_Get_Data+0xce>
}
 8000e28:	bf00      	nop
  if(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2e:	4868      	ldr	r0, [pc, #416]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000e30:	f001 f8ca 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80c5 	beq.w	8000fc6 <DHT11_Get_Data+0x276>
 8000e3c:	2350      	movs	r3, #80	; 0x50
 8000e3e:	617b      	str	r3, [r7, #20]
  micros *= (SystemCoreClock / 1000000) / 9;
 8000e40:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <DHT11_Get_Data+0x284>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a64      	ldr	r2, [pc, #400]	; (8000fd8 <DHT11_Get_Data+0x288>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0ddb      	lsrs	r3, r3, #23
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	fb02 f303 	mul.w	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  while (micros--);
 8000e54:	bf00      	nop
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	617a      	str	r2, [r7, #20]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1fa      	bne.n	8000e56 <DHT11_Get_Data+0x106>
}
 8000e60:	bf00      	nop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e62:	b672      	cpsid	i
}
 8000e64:	bf00      	nop
  for (uint8_t j = 4; j > 0; j--)
 8000e66:	2304      	movs	r3, #4
 8000e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e6c:	e05b      	b.n	8000f26 <DHT11_Get_Data+0x1d6>
    buffer_data[j] = 0;
 8000e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e72:	3330      	adds	r3, #48	; 0x30
 8000e74:	443b      	add	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	f803 2c08 	strb.w	r2, [r3, #-8]
    for(uint8_t i = 7; i > 0; i--)
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000e82:	e047      	b.n	8000f14 <DHT11_Get_Data+0x1c4>
      while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8000e84:	bf00      	nop
 8000e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8a:	4851      	ldr	r0, [pc, #324]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000e8c:	f001 f89c 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f7      	beq.n	8000e86 <DHT11_Get_Data+0x136>
 8000e96:	231e      	movs	r3, #30
 8000e98:	60bb      	str	r3, [r7, #8]
  micros *= (SystemCoreClock / 1000000) / 9;
 8000e9a:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <DHT11_Get_Data+0x284>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <DHT11_Get_Data+0x288>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0ddb      	lsrs	r3, r3, #23
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	60bb      	str	r3, [r7, #8]
  while (micros--);
 8000eae:	bf00      	nop
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1fa      	bne.n	8000eb0 <DHT11_Get_Data+0x160>
}
 8000eba:	bf00      	nop
      if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	4843      	ldr	r0, [pc, #268]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000ec2:	f001 f881 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d015      	beq.n	8000ef8 <DHT11_Get_Data+0x1a8>
        buffer_data[j] |= (1 << i);
 8000ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed0:	3330      	adds	r3, #48	; 0x30
 8000ed2:	443b      	add	r3, r7
 8000ed4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000ed8:	b25a      	sxtb	r2, r3
 8000eda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b25a      	sxtb	r2, r3
 8000eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	3330      	adds	r3, #48	; 0x30
 8000ef2:	443b      	add	r3, r7
 8000ef4:	f803 2c08 	strb.w	r2, [r3, #-8]
      while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8000ef8:	bf00      	nop
 8000efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efe:	4834      	ldr	r0, [pc, #208]	; (8000fd0 <DHT11_Get_Data+0x280>)
 8000f00:	f001 f862 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f7      	bne.n	8000efa <DHT11_Get_Data+0x1aa>
    for(uint8_t i = 7; i > 0; i--)
 8000f0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000f14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1b3      	bne.n	8000e84 <DHT11_Get_Data+0x134>
  for (uint8_t j = 4; j > 0; j--)
 8000f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f20:	3b01      	subs	r3, #1
 8000f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d19f      	bne.n	8000e6e <DHT11_Get_Data+0x11e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f2e:	b662      	cpsie	i
}
 8000f30:	bf00      	nop
  if(buffer_data[0] == (buffer_data[1] + buffer_data[2] + buffer_data[3] + buffer_data[4]))
 8000f32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f36:	461a      	mov	r2, r3
 8000f38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f42:	440b      	add	r3, r1
 8000f44:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000f48:	440b      	add	r3, r1
 8000f4a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8000f4e:	440b      	add	r3, r1
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d139      	bne.n	8000fc8 <DHT11_Get_Data+0x278>
    if(p_temperature != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d01e      	beq.n	8000f98 <DHT11_Get_Data+0x248>
      *p_temperature = (float)((*(uint16_t*)(buffer_data + 1)) & 0x7FFF) / 10;
 8000f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5e:	3301      	adds	r3, #1
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fb6e 	bl	8000648 <__aeabi_i2f>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <DHT11_Get_Data+0x28c>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fc71 	bl	8000858 <__aeabi_fdiv>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
      if((*(uint16_t*)(buffer_data + 1)) & 0x8000)
 8000f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f82:	3301      	adds	r3, #1
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da05      	bge.n	8000f98 <DHT11_Get_Data+0x248>
        *p_temperature *= -1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	601a      	str	r2, [r3, #0]
    if(p_humidity != NULL)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d014      	beq.n	8000fc8 <DHT11_Get_Data+0x278>
      *p_humidity = (float)(*(int16_t*)(buffer_data + 3)) / 10;
 8000f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa2:	3303      	adds	r3, #3
 8000fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fb4d 	bl	8000648 <__aeabi_i2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	490a      	ldr	r1, [pc, #40]	; (8000fdc <DHT11_Get_Data+0x28c>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fc50 	bl	8000858 <__aeabi_fdiv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e002      	b.n	8000fc8 <DHT11_Get_Data+0x278>
    return;
 8000fc2:	bf00      	nop
 8000fc4:	e000      	b.n	8000fc8 <DHT11_Get_Data+0x278>
    return;
 8000fc6:	bf00      	nop
}
 8000fc8:	3730      	adds	r7, #48	; 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010800 	.word	0x40010800
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	ee9bfab5 	.word	0xee9bfab5
 8000fdc:	41200000 	.word	0x41200000

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b097      	sub	sp, #92	; 0x5c
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fb01 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f8ab 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 f90f 	bl	8001210 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ff2:	f000 f8e3 	bl	80011bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t measurement_period = MEASUREMENT_NORMAL_PERIOD;
 8000ff6:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8000ffa:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t measurement_start_time = Sys_Time_Get_Time();
 8000ffc:	f000 fa24 	bl	8001448 <Sys_Time_Get_Time>
 8001000:	6538      	str	r0, [r7, #80]	; 0x50
  uint32_t saving_start_time = Sys_Time_Get_Time();
 8001002:	f000 fa21 	bl	8001448 <Sys_Time_Get_Time>
 8001006:	64f8      	str	r0, [r7, #76]	; 0x4c
  char uart_message[UART_MESSAGE_BUFFER_SIZE];
  float saving_data[3];
  FLASH_EraseInitTypeDef erase_struct =
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	4b45      	ldr	r3, [pc, #276]	; (800112c <main+0x14c>)
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	2301      	movs	r3, #1
 800101a:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(Sys_Time_Its_Time(measurement_start_time, measurement_period))
 800101c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800101e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001020:	f000 fa19 	bl	8001456 <Sys_Time_Its_Time>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d03a      	beq.n	80010a0 <main+0xc0>
    {
      Measure_Temperature();
 800102a:	f000 fa45 	bl	80014b8 <Measure_Temperature>
      if(Get_Current_Temperature() < 10.0F)
 800102e:	f000 fa33 	bl	8001498 <Get_Current_Temperature>
 8001032:	4603      	mov	r3, r0
 8001034:	493e      	ldr	r1, [pc, #248]	; (8001130 <main+0x150>)
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fcf8 	bl	8000a2c <__aeabi_fcmplt>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <main+0x6a>
      {
        measurement_period = MEASUREMENT_SMALL_PERIOD;
 8001042:	f643 2397 	movw	r3, #14999	; 0x3a97
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
 8001048:	e00c      	b.n	8001064 <main+0x84>
      }
      else if(Get_Current_Temperature() > 15.0F)
 800104a:	f000 fa25 	bl	8001498 <Get_Current_Temperature>
 800104e:	4603      	mov	r3, r0
 8001050:	4938      	ldr	r1, [pc, #224]	; (8001134 <main+0x154>)
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fd08 	bl	8000a68 <__aeabi_fcmpgt>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <main+0x84>
      {
        measurement_period = MEASUREMENT_NORMAL_PERIOD;
 800105e:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8001062:	657b      	str	r3, [r7, #84]	; 0x54
      }
      sprintf(uart_message, "Current temperature: %.1f\r\n", Get_Current_Temperature());
 8001064:	f000 fa18 	bl	8001498 <Get_Current_Temperature>
 8001068:	4603      	mov	r3, r0
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f9da 	bl	8000424 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	f107 0020 	add.w	r0, r7, #32
 8001078:	492f      	ldr	r1, [pc, #188]	; (8001138 <main+0x158>)
 800107a:	f001 fdd9 	bl	8002c30 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_message, (strlen(uart_message) * sizeof(char)), 1000);
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f862 	bl	800014c <strlen>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	f107 0120 	add.w	r1, r7, #32
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	4829      	ldr	r0, [pc, #164]	; (800113c <main+0x15c>)
 8001096:	f001 fc2e 	bl	80028f6 <HAL_UART_Transmit>
      measurement_start_time = Sys_Time_Get_Time();
 800109a:	f000 f9d5 	bl	8001448 <Sys_Time_Get_Time>
 800109e:	6538      	str	r0, [r7, #80]	; 0x50
    }
    if(Sys_Time_Its_Time(saving_start_time, SAVING_DATA_PERIOD))
 80010a0:	4927      	ldr	r1, [pc, #156]	; (8001140 <main+0x160>)
 80010a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010a4:	f000 f9d7 	bl	8001456 <Sys_Time_Its_Time>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0b6      	beq.n	800101c <main+0x3c>
    {
      Get_Max_Middle_Min_Temperature(&saving_data[0], &saving_data[1], &saving_data[2]);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	f103 0208 	add.w	r2, r3, #8
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	1d19      	adds	r1, r3, #4
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fa15 	bl	80014f0 <Get_Max_Middle_Min_Temperature>
      HAL_FLASH_Unlock();
 80010c6:	f000 fc6b 	bl	80019a0 <HAL_FLASH_Unlock>
      HAL_FLASHEx_Erase(&erase_struct, &page_error);
 80010ca:	463a      	mov	r2, r7
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fd4d 	bl	8001b70 <HAL_FLASHEx_Erase>
      for(uint8_t i = 0; i < 3; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80010dc:	e01b      	b.n	8001116 <main+0x136>
      {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (SAVING_DATA_ADRESS + (sizeof(float) * i)), saving_data[i]);
 80010de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010e2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80010e6:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 80010ea:	009c      	lsls	r4, r3, #2
 80010ec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	3358      	adds	r3, #88	; 0x58
 80010f4:	443b      	add	r3, r7
 80010f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fcbe 	bl	8000a7c <__aeabi_f2ulz>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4621      	mov	r1, r4
 8001106:	2002      	movs	r0, #2
 8001108:	f000 fbda 	bl	80018c0 <HAL_FLASH_Program>
      for(uint8_t i = 0; i < 3; i++)
 800110c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001110:	3301      	adds	r3, #1
 8001112:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001116:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800111a:	2b02      	cmp	r3, #2
 800111c:	d9df      	bls.n	80010de <main+0xfe>
      }
      HAL_FLASH_Lock();
 800111e:	f000 fc65 	bl	80019ec <HAL_FLASH_Lock>
      saving_start_time = Sys_Time_Get_Time();
 8001122:	f000 f991 	bl	8001448 <Sys_Time_Get_Time>
 8001126:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(Sys_Time_Its_Time(measurement_start_time, measurement_period))
 8001128:	e778      	b.n	800101c <main+0x3c>
 800112a:	bf00      	nop
 800112c:	0800fc00 	.word	0x0800fc00
 8001130:	41200000 	.word	0x41200000
 8001134:	41700000 	.word	0x41700000
 8001138:	0800353c 	.word	0x0800353c
 800113c:	2000008c 	.word	0x2000008c
 8001140:	001b7740 	.word	0x001b7740

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b090      	sub	sp, #64	; 0x40
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fd64 	bl	8002c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116a:	2301      	movs	r3, #1
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2310      	movs	r3, #16
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f000 ff54 	bl	8002028 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001186:	f000 f877 	bl	8001278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f9c2 	bl	800252c <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011ae:	f000 f863 	bl	8001278 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3740      	adds	r7, #64	; 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_USART1_UART_Init+0x50>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USART1_UART_Init+0x4c>)
 80011f4:	f001 fb32 	bl	800285c <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011fe:	f000 f83b 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000008c 	.word	0x2000008c
 800120c:	40013800 	.word	0x40013800

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_GPIO_Init+0x60>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <MX_GPIO_Init+0x60>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_GPIO_Init+0x60>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <MX_GPIO_Init+0x64>)
 8001244:	f000 fed7 	bl	8001ff6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_GPIO_Init+0x64>)
 8001262:	f000 fd2d 	bl	8001cc0 <HAL_GPIO_Init>

}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	40010800 	.word	0x40010800

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_MspInit+0x5c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_MspInit+0x5c>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_MspInit+0x60>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_MspInit+0x60>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_UART_MspInit+0x8c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d131      	bne.n	800136c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_UART_MspInit+0x90>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a1a      	ldr	r2, [pc, #104]	; (8001378 <HAL_UART_MspInit+0x90>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_UART_MspInit+0x90>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0x90>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_UART_MspInit+0x90>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_UART_MspInit+0x90>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <HAL_UART_MspInit+0x94>)
 800134e:	f000 fcb7 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_UART_MspInit+0x94>)
 8001368:	f000 fcaa 	bl	8001cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40013800 	.word	0x40013800
 8001378:	40021000 	.word	0x40021000
 800137c:	40010800 	.word	0x40010800

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 f957 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f001 fbe4 	bl	8002bcc <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20005000 	.word	0x20005000
 8001430:	00000400 	.word	0x00000400
 8001434:	200000d0 	.word	0x200000d0
 8001438:	200002a0 	.word	0x200002a0

0800143c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <Sys_Time_Get_Time>:
 */
#include "systime.h"
#include "stm32f1xx_hal.h"

uint32_t Sys_Time_Get_Time(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800144c:	f000 f926 	bl	800169c <HAL_GetTick>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}

08001456 <Sys_Time_Its_Time>:

bool Sys_Time_Its_Time(uint32_t start_time, uint32_t delay)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  uint32_t current_time = Sys_Time_Get_Time();
 8001460:	f7ff fff2 	bl	8001448 <Sys_Time_Get_Time>
 8001464:	60f8      	str	r0, [r7, #12]
  uint32_t delta = (current_time < start_time) ? ((UINT32_MAX - start_time) + current_time) : (current_time - start_time);
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	429a      	cmp	r2, r3
 800146c:	d204      	bcs.n	8001478 <Sys_Time_Its_Time+0x22>
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	e002      	b.n	800147e <Sys_Time_Its_Time+0x28>
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	60bb      	str	r3, [r7, #8]
  return (delta >= delay);
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	bf2c      	ite	cs
 8001488:	2301      	movcs	r3, #1
 800148a:	2300      	movcc	r3, #0
 800148c:	b2db      	uxtb	r3, r3
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <Get_Current_Temperature>:

static float temperature_buffer[TEMPERATURE_BUFFER_SIZE];  // Collection of 100 records temperature.
static unsigned temperature_buffer_current_index = 0;  // Current index of collection.

float Get_Current_Temperature(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return temperature_buffer[temperature_buffer_current_index];
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <Get_Current_Temperature+0x18>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <Get_Current_Temperature+0x1c>)
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000264 	.word	0x20000264
 80014b4:	200000d4 	.word	0x200000d4

080014b8 <Measure_Temperature>:

void Measure_Temperature(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  temperature_buffer_current_index = (temperature_buffer_current_index < TEMPERATURE_BUFFER_SIZE) ? temperature_buffer_current_index + 1 : 0;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <Measure_Temperature+0x30>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b63      	cmp	r3, #99	; 0x63
 80014c2:	d803      	bhi.n	80014cc <Measure_Temperature+0x14>
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <Measure_Temperature+0x30>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	e000      	b.n	80014ce <Measure_Temperature+0x16>
 80014cc:	2300      	movs	r3, #0
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <Measure_Temperature+0x30>)
 80014d0:	6013      	str	r3, [r2, #0]
  DHT11_Get_Data((temperature_buffer + temperature_buffer_current_index), NULL);
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <Measure_Temperature+0x30>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <Measure_Temperature+0x34>)
 80014da:	4413      	add	r3, r2
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fc36 	bl	8000d50 <DHT11_Get_Data>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000264 	.word	0x20000264
 80014ec:	200000d4 	.word	0x200000d4

080014f0 <Get_Max_Middle_Min_Temperature>:

void Get_Max_Middle_Min_Temperature(float* p_max_temperature, float* p_middle_temperature, float* p_min_temperature)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  float max_temperature = temperature_buffer[0];
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <Get_Max_Middle_Min_Temperature+0xa8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61fb      	str	r3, [r7, #28]
  float min_temperature = temperature_buffer[0];
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <Get_Max_Middle_Min_Temperature+0xa8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	61bb      	str	r3, [r7, #24]
  float middle_temperature_buffer = temperature_buffer[0];
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <Get_Max_Middle_Min_Temperature+0xa8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	617b      	str	r3, [r7, #20]
  for (unsigned i = 1; i < TEMPERATURE_BUFFER_SIZE; i++)
 800150e:	2301      	movs	r3, #1
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	e02c      	b.n	800156e <Get_Max_Middle_Min_Temperature+0x7e>
  {
    if(max_temperature > temperature_buffer[i])
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <Get_Max_Middle_Min_Temperature+0xa8>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	4619      	mov	r1, r3
 800151e:	69f8      	ldr	r0, [r7, #28]
 8001520:	f7ff faa2 	bl	8000a68 <__aeabi_fcmpgt>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <Get_Max_Middle_Min_Temperature+0x44>
    {
      max_temperature = temperature_buffer[i];
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <Get_Max_Middle_Min_Temperature+0xa8>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	61fb      	str	r3, [r7, #28]
    }
    if(min_temperature < temperature_buffer[i])
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <Get_Max_Middle_Min_Temperature+0xa8>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	4619      	mov	r1, r3
 800153e:	69b8      	ldr	r0, [r7, #24]
 8001540:	f7ff fa74 	bl	8000a2c <__aeabi_fcmplt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <Get_Max_Middle_Min_Temperature+0x64>
    {
      min_temperature = temperature_buffer[i];
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <Get_Max_Middle_Min_Temperature+0xa8>)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	61bb      	str	r3, [r7, #24]
    }
    middle_temperature_buffer += temperature_buffer[i];
 8001554:	4a10      	ldr	r2, [pc, #64]	; (8001598 <Get_Max_Middle_Min_Temperature+0xa8>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	4619      	mov	r1, r3
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7fe ffbe 	bl	80004e0 <__addsf3>
 8001564:	4603      	mov	r3, r0
 8001566:	617b      	str	r3, [r7, #20]
  for (unsigned i = 1; i < TEMPERATURE_BUFFER_SIZE; i++)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3301      	adds	r3, #1
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2b63      	cmp	r3, #99	; 0x63
 8001572:	d9cf      	bls.n	8001514 <Get_Max_Middle_Min_Temperature+0x24>
  }
  *p_max_temperature = max_temperature;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	601a      	str	r2, [r3, #0]
  *p_middle_temperature = (middle_temperature_buffer / TEMPERATURE_BUFFER_SIZE);
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <Get_Max_Middle_Min_Temperature+0xac>)
 800157c:	6978      	ldr	r0, [r7, #20]
 800157e:	f7ff f96b 	bl	8000858 <__aeabi_fdiv>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	601a      	str	r2, [r3, #0]
  *p_min_temperature = min_temperature;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200000d4 	.word	0x200000d4
 800159c:	42c80000 	.word	0x42c80000

080015a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015c6:	f7ff ff39 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ca:	f001 fb05 	bl	8002bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ce:	f7ff fd07 	bl	8000fe0 <main>
  bx lr
 80015d2:	4770      	bx	lr
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015dc:	080035bc 	.word	0x080035bc
  ldr r2, =_sbss
 80015e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015e4:	200002a0 	.word	0x200002a0

080015e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_2_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x28>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x28>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f92b 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fe3c 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f935 	bl	80018a6 <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f90b 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	20000008 	.word	0x20000008
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_IncTick+0x1c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x20>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_IncTick+0x20>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000008 	.word	0x20000008
 8001698:	20000268 	.word	0x20000268

0800169c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b02      	ldr	r3, [pc, #8]	; (80016ac <HAL_GetTick+0x10>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	20000268 	.word	0x20000268

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff fff0 	bl	800169c <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d005      	beq.n	80016d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_Delay+0x44>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d6:	bf00      	nop
 80016d8:	f7ff ffe0 	bl	800169c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d8f7      	bhi.n	80016d8 <HAL_Delay+0x28>
  {
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db0a      	blt.n	8001786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	; (80017a8 <__NVIC_SetPriority+0x4c>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	440b      	add	r3, r1
 8001780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001784:	e00a      	b.n	800179c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4908      	ldr	r1, [pc, #32]	; (80017ac <__NVIC_SetPriority+0x50>)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3b04      	subs	r3, #4
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	440b      	add	r3, r1
 800179a:	761a      	strb	r2, [r3, #24]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f1c3 0307 	rsb	r3, r3, #7
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf28      	it	cs
 80017ce:	2304      	movcs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3304      	adds	r3, #4
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d902      	bls.n	80017e0 <NVIC_EncodePriority+0x30>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3b03      	subs	r3, #3
 80017de:	e000      	b.n	80017e2 <NVIC_EncodePriority+0x32>
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	401a      	ands	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43d9      	mvns	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	4313      	orrs	r3, r2
         );
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	; 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff90 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff49 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff5e 	bl	8001740 <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff90 	bl	80017b0 <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5f 	bl	800175c <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffb0 	bl	8001814 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_FLASH_Program+0xd8>)
 80018dc:	7e1b      	ldrb	r3, [r3, #24]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_FLASH_Program+0x26>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e054      	b.n	8001990 <HAL_FLASH_Program+0xd0>
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_FLASH_Program+0xd8>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018f0:	f000 f8a8 	bl	8001a44 <FLASH_WaitForLastOperation>
 80018f4:	4603      	mov	r3, r0
 80018f6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d144      	bne.n	8001988 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d102      	bne.n	800190a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001904:	2301      	movs	r3, #1
 8001906:	757b      	strb	r3, [r7, #21]
 8001908:	e007      	b.n	800191a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d102      	bne.n	8001916 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001910:	2302      	movs	r3, #2
 8001912:	757b      	strb	r3, [r7, #21]
 8001914:	e001      	b.n	800191a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001916:	2304      	movs	r3, #4
 8001918:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800191a:	2300      	movs	r3, #0
 800191c:	75bb      	strb	r3, [r7, #22]
 800191e:	e02d      	b.n	800197c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001920:	7dbb      	ldrb	r3, [r7, #22]
 8001922:	005a      	lsls	r2, r3, #1
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	eb02 0c03 	add.w	ip, r2, r3
 800192a:	7dbb      	ldrb	r3, [r7, #22]
 800192c:	0119      	lsls	r1, r3, #4
 800192e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001932:	f1c1 0620 	rsb	r6, r1, #32
 8001936:	f1a1 0020 	sub.w	r0, r1, #32
 800193a:	fa22 f401 	lsr.w	r4, r2, r1
 800193e:	fa03 f606 	lsl.w	r6, r3, r6
 8001942:	4334      	orrs	r4, r6
 8001944:	fa23 f000 	lsr.w	r0, r3, r0
 8001948:	4304      	orrs	r4, r0
 800194a:	fa23 f501 	lsr.w	r5, r3, r1
 800194e:	b2a3      	uxth	r3, r4
 8001950:	4619      	mov	r1, r3
 8001952:	4660      	mov	r0, ip
 8001954:	f000 f85a 	bl	8001a0c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001958:	f24c 3050 	movw	r0, #50000	; 0xc350
 800195c:	f000 f872 	bl	8001a44 <FLASH_WaitForLastOperation>
 8001960:	4603      	mov	r3, r0
 8001962:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_FLASH_Program+0xdc>)
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	4a0c      	ldr	r2, [pc, #48]	; (800199c <HAL_FLASH_Program+0xdc>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d107      	bne.n	8001986 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001976:	7dbb      	ldrb	r3, [r7, #22]
 8001978:	3301      	adds	r3, #1
 800197a:	75bb      	strb	r3, [r7, #22]
 800197c:	7dba      	ldrb	r2, [r7, #22]
 800197e:	7d7b      	ldrb	r3, [r7, #21]
 8001980:	429a      	cmp	r2, r3
 8001982:	d3cd      	bcc.n	8001920 <HAL_FLASH_Program+0x60>
 8001984:	e000      	b.n	8001988 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001986:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_FLASH_Program+0xd8>)
 800198a:	2200      	movs	r2, #0
 800198c:	761a      	strb	r2, [r3, #24]

  return status;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001998:	20000270 	.word	0x20000270
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_FLASH_Unlock+0x40>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00d      	beq.n	80019d2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_FLASH_Unlock+0x40>)
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_FLASH_Unlock+0x44>)
 80019ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_FLASH_Unlock+0x40>)
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_FLASH_Unlock+0x48>)
 80019c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_FLASH_Unlock+0x40>)
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40022000 	.word	0x40022000
 80019e4:	45670123 	.word	0x45670123
 80019e8:	cdef89ab 	.word	0xcdef89ab

080019ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_FLASH_Lock+0x1c>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_FLASH_Lock+0x1c>)
 80019f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000

08001a0c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <FLASH_Program_HalfWord+0x30>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <FLASH_Program_HalfWord+0x34>)
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <FLASH_Program_HalfWord+0x34>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	801a      	strh	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000270 	.word	0x20000270
 8001a40:	40022000 	.word	0x40022000

08001a44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff fe26 	bl	800169c <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a52:	e010      	b.n	8001a76 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	d00c      	beq.n	8001a76 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <FLASH_WaitForLastOperation+0x2e>
 8001a62:	f7ff fe1b 	bl	800169c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d201      	bcs.n	8001a76 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e025      	b.n	8001ac2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <FLASH_WaitForLastOperation+0x88>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e8      	bne.n	8001a54 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <FLASH_WaitForLastOperation+0x88>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <FLASH_WaitForLastOperation+0x88>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <FLASH_WaitForLastOperation+0x88>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10b      	bne.n	8001ab8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <FLASH_WaitForLastOperation+0x88>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <FLASH_WaitForLastOperation+0x88>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ab8:	f000 f80a 	bl	8001ad0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <FLASH_SetErrorCode+0x98>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <FLASH_SetErrorCode+0x9c>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <FLASH_SetErrorCode+0x9c>)
 8001af0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f043 0310 	orr.w	r3, r3, #16
 8001af8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <FLASH_SetErrorCode+0x98>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <FLASH_SetErrorCode+0x9c>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <FLASH_SetErrorCode+0x9c>)
 8001b10:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <FLASH_SetErrorCode+0x98>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <FLASH_SetErrorCode+0x9c>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <FLASH_SetErrorCode+0x9c>)
 8001b30:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <FLASH_SetErrorCode+0x98>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <FLASH_SetErrorCode+0x98>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f240 1201 	movw	r2, #257	; 0x101
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d106      	bne.n	8001b56 <FLASH_SetErrorCode+0x86>
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <FLASH_SetErrorCode+0x98>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <FLASH_SetErrorCode+0x98>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	61d3      	str	r3, [r2, #28]
}  
 8001b54:	e002      	b.n	8001b5c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <FLASH_SetErrorCode+0x98>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60d3      	str	r3, [r2, #12]
}  
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	20000270 	.word	0x20000270

08001b70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_FLASHEx_Erase+0xd0>)
 8001b84:	7e1b      	ldrb	r3, [r3, #24]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_FLASHEx_Erase+0x1e>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e053      	b.n	8001c36 <HAL_FLASHEx_Erase+0xc6>
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <HAL_FLASHEx_Erase+0xd0>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d116      	bne.n	8001bca <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001b9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ba0:	f7ff ff50 	bl	8001a44 <FLASH_WaitForLastOperation>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d141      	bne.n	8001c2e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f000 f84c 	bl	8001c48 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bb4:	f7ff ff46 	bl	8001a44 <FLASH_WaitForLastOperation>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_FLASHEx_Erase+0xd4>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	4a20      	ldr	r2, [pc, #128]	; (8001c44 <HAL_FLASHEx_Erase+0xd4>)
 8001bc2:	f023 0304 	bic.w	r3, r3, #4
 8001bc6:	6113      	str	r3, [r2, #16]
 8001bc8:	e031      	b.n	8001c2e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001bca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bce:	f7ff ff39 	bl	8001a44 <FLASH_WaitForLastOperation>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d12a      	bne.n	8001c2e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295
 8001bde:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	e019      	b.n	8001c1c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001be8:	68b8      	ldr	r0, [r7, #8]
 8001bea:	f000 f849 	bl	8001c80 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bf2:	f7ff ff27 	bl	8001a44 <FLASH_WaitForLastOperation>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_FLASHEx_Erase+0xd4>)
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <HAL_FLASHEx_Erase+0xd4>)
 8001c00:	f023 0302 	bic.w	r3, r3, #2
 8001c04:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	601a      	str	r2, [r3, #0]
            break;
 8001c12:	e00c      	b.n	8001c2e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c1a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	029a      	lsls	r2, r3, #10
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3dc      	bcc.n	8001be8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_FLASHEx_Erase+0xd0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	761a      	strb	r2, [r3, #24]

  return status;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000270 	.word	0x20000270
 8001c44:	40022000 	.word	0x40022000

08001c48 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <FLASH_MassErase+0x30>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <FLASH_MassErase+0x34>)
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <FLASH_MassErase+0x34>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <FLASH_MassErase+0x34>)
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <FLASH_MassErase+0x34>)
 8001c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000270 	.word	0x20000270
 8001c7c:	40022000 	.word	0x40022000

08001c80 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <FLASH_PageErase+0x38>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <FLASH_PageErase+0x3c>)
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <FLASH_PageErase+0x3c>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <FLASH_PageErase+0x3c>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <FLASH_PageErase+0x3c>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <FLASH_PageErase+0x3c>)
 8001ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001caa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000270 	.word	0x20000270
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b08b      	sub	sp, #44	; 0x2c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd2:	e169      	b.n	8001fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8158 	bne.w	8001fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a9a      	ldr	r2, [pc, #616]	; (8001f60 <HAL_GPIO_Init+0x2a0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d05e      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001cfc:	4a98      	ldr	r2, [pc, #608]	; (8001f60 <HAL_GPIO_Init+0x2a0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d875      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d02:	4a98      	ldr	r2, [pc, #608]	; (8001f64 <HAL_GPIO_Init+0x2a4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d058      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d08:	4a96      	ldr	r2, [pc, #600]	; (8001f64 <HAL_GPIO_Init+0x2a4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d86f      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d0e:	4a96      	ldr	r2, [pc, #600]	; (8001f68 <HAL_GPIO_Init+0x2a8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d052      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d14:	4a94      	ldr	r2, [pc, #592]	; (8001f68 <HAL_GPIO_Init+0x2a8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d869      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d1a:	4a94      	ldr	r2, [pc, #592]	; (8001f6c <HAL_GPIO_Init+0x2ac>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d04c      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d20:	4a92      	ldr	r2, [pc, #584]	; (8001f6c <HAL_GPIO_Init+0x2ac>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d863      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d26:	4a92      	ldr	r2, [pc, #584]	; (8001f70 <HAL_GPIO_Init+0x2b0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d046      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d2c:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <HAL_GPIO_Init+0x2b0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d85d      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d82a      	bhi.n	8001d8c <HAL_GPIO_Init+0xcc>
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d859      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d3a:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <HAL_GPIO_Init+0x80>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001dbb 	.word	0x08001dbb
 8001d44:	08001d95 	.word	0x08001d95
 8001d48:	08001da7 	.word	0x08001da7
 8001d4c:	08001de9 	.word	0x08001de9
 8001d50:	08001def 	.word	0x08001def
 8001d54:	08001def 	.word	0x08001def
 8001d58:	08001def 	.word	0x08001def
 8001d5c:	08001def 	.word	0x08001def
 8001d60:	08001def 	.word	0x08001def
 8001d64:	08001def 	.word	0x08001def
 8001d68:	08001def 	.word	0x08001def
 8001d6c:	08001def 	.word	0x08001def
 8001d70:	08001def 	.word	0x08001def
 8001d74:	08001def 	.word	0x08001def
 8001d78:	08001def 	.word	0x08001def
 8001d7c:	08001def 	.word	0x08001def
 8001d80:	08001def 	.word	0x08001def
 8001d84:	08001d9d 	.word	0x08001d9d
 8001d88:	08001db1 	.word	0x08001db1
 8001d8c:	4a79      	ldr	r2, [pc, #484]	; (8001f74 <HAL_GPIO_Init+0x2b4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d92:	e02c      	b.n	8001dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e029      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	3304      	adds	r3, #4
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e024      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	3308      	adds	r3, #8
 8001dac:	623b      	str	r3, [r7, #32]
          break;
 8001dae:	e01f      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	330c      	adds	r3, #12
 8001db6:	623b      	str	r3, [r7, #32]
          break;
 8001db8:	e01a      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e013      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	611a      	str	r2, [r3, #16]
          break;
 8001dda:	e009      	b.n	8001df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	615a      	str	r2, [r3, #20]
          break;
 8001de6:	e003      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          break;
 8001dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2bff      	cmp	r3, #255	; 0xff
 8001df4:	d801      	bhi.n	8001dfa <HAL_GPIO_Init+0x13a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	e001      	b.n	8001dfe <HAL_GPIO_Init+0x13e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2bff      	cmp	r3, #255	; 0xff
 8001e04:	d802      	bhi.n	8001e0c <HAL_GPIO_Init+0x14c>
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x152>
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	3b08      	subs	r3, #8
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	210f      	movs	r1, #15
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	6a39      	ldr	r1, [r7, #32]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80b1 	beq.w	8001fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e40:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	; (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e58:	4a48      	ldr	r2, [pc, #288]	; (8001f7c <HAL_GPIO_Init+0x2bc>)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <HAL_GPIO_Init+0x2c0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_GPIO_Init+0x1ec>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3f      	ldr	r2, [pc, #252]	; (8001f84 <HAL_GPIO_Init+0x2c4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_GPIO_Init+0x1e8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	; (8001f88 <HAL_GPIO_Init+0x2c8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <HAL_GPIO_Init+0x2cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_GPIO_Init+0x1e0>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001eac:	2300      	movs	r3, #0
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ebe:	492f      	ldr	r1, [pc, #188]	; (8001f7c <HAL_GPIO_Init+0x2bc>)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	492c      	ldr	r1, [pc, #176]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4928      	ldr	r1, [pc, #160]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4922      	ldr	r1, [pc, #136]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	491e      	ldr	r1, [pc, #120]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	4918      	ldr	r1, [pc, #96]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4914      	ldr	r1, [pc, #80]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d021      	beq.n	8001f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
 8001f5c:	e021      	b.n	8001fa2 <HAL_GPIO_Init+0x2e2>
 8001f5e:	bf00      	nop
 8001f60:	10320000 	.word	0x10320000
 8001f64:	10310000 	.word	0x10310000
 8001f68:	10220000 	.word	0x10220000
 8001f6c:	10210000 	.word	0x10210000
 8001f70:	10120000 	.word	0x10120000
 8001f74:	10110000 	.word	0x10110000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	40011000 	.word	0x40011000
 8001f8c:	40011400 	.word	0x40011400
 8001f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	4909      	ldr	r1, [pc, #36]	; (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f47f ae8e 	bne.w	8001cd4 <HAL_GPIO_Init+0x14>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	372c      	adds	r7, #44	; 0x2c
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	807b      	strh	r3, [r7, #2]
 8002002:	4613      	mov	r3, r2
 8002004:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002006:	787b      	ldrb	r3, [r7, #1]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200c:	887a      	ldrh	r2, [r7, #2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002012:	e003      	b.n	800201c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e272      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8087 	beq.w	8002156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002048:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00c      	beq.n	800206e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002054:	4b8f      	ldr	r3, [pc, #572]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d112      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
 8002060:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d10b      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06c      	beq.n	8002154 <HAL_RCC_OscConfig+0x12c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d168      	bne.n	8002154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e24c      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x76>
 8002090:	4b80      	ldr	r3, [pc, #512]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7f      	ldr	r2, [pc, #508]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b7b      	ldr	r3, [pc, #492]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7a      	ldr	r2, [pc, #488]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a77      	ldr	r2, [pc, #476]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0xbc>
 80020ca:	4b72      	ldr	r3, [pc, #456]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a71      	ldr	r2, [pc, #452]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6f      	ldr	r3, [pc, #444]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6e      	ldr	r2, [pc, #440]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020e4:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6a      	ldr	r2, [pc, #424]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b68      	ldr	r3, [pc, #416]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a67      	ldr	r2, [pc, #412]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff faca 	bl	800169c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fac6 	bl	800169c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e200      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xe4>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fab6 	bl	800169c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fab2 	bl	800169c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1ec      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x10c>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800216e:	4b49      	ldr	r3, [pc, #292]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1c0      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4939      	ldr	r1, [pc, #228]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff fa6b 	bl	800169c <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff fa67 	bl	800169c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1a1      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4927      	ldr	r1, [pc, #156]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fa4a 	bl	800169c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff fa46 	bl	800169c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e180      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d03a      	beq.n	80022ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d019      	beq.n	8002272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7ff fa2a 	bl	800169c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff fa26 	bl	800169c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e160      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f000 fad8 	bl	8002820 <RCC_Delay>
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fa10 	bl	800169c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	e00f      	b.n	80022a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff fa0c 	bl	800169c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d908      	bls.n	80022a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e146      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	42420000 	.word	0x42420000
 800229c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e9      	bne.n	8002280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a6 	beq.w	8002406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b8b      	ldr	r3, [pc, #556]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b88      	ldr	r3, [pc, #544]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a87      	ldr	r2, [pc, #540]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b85      	ldr	r3, [pc, #532]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b82      	ldr	r3, [pc, #520]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b7f      	ldr	r3, [pc, #508]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff f9cd 	bl	800169c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff f9c9 	bl	800169c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e103      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x312>
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e02d      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x334>
 8002342:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a66      	ldr	r2, [pc, #408]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	e01c      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x356>
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a60      	ldr	r2, [pc, #384]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a5a      	ldr	r2, [pc, #360]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b58      	ldr	r3, [pc, #352]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a57      	ldr	r2, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7ff f97d 	bl	800169c <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7ff f979 	bl	800169c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0b1      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCC_OscConfig+0x37e>
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7ff f967 	bl	800169c <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff f963 	bl	800169c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e09b      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	4b40      	ldr	r3, [pc, #256]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8087 	beq.w	800251e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d061      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d146      	bne.n	80024b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff f937 	bl	800169c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff f933 	bl	800169c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e06d      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4921      	ldr	r1, [pc, #132]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a19      	ldr	r1, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	430b      	orrs	r3, r1
 800247e:	491b      	ldr	r1, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7ff f907 	bl	800169c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7ff f903 	bl	800169c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e03d      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x46a>
 80024b0:	e035      	b.n	800251e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff f8f0 	bl	800169c <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7ff f8ec 	bl	800169c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e026      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x498>
 80024de:	e01e      	b.n	800251e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e019      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_OscConfig+0x500>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d0      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4965      	ldr	r1, [pc, #404]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d040      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e073      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4936      	ldr	r1, [pc, #216]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7ff f83e 	bl	800169c <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7ff f83a 	bl	800169c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e053      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d210      	bcs.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4922      	ldr	r1, [pc, #136]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1cc>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe ff9c 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08003568 	.word	0x08003568
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b490      	push	{r4, r7}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002706:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_GetSysClockFreq+0xac>)
 8002708:	1d3c      	adds	r4, r7, #4
 800270a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800270c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002710:	f240 2301 	movw	r3, #513	; 0x201
 8002714:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b04      	cmp	r3, #4
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x40>
 800273a:	2b08      	cmp	r3, #8
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x46>
 800273e:	e02b      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	e02b      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	0c9b      	lsrs	r3, r3, #18
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3328      	adds	r3, #40	; 0x28
 8002750:	443b      	add	r3, r7
 8002752:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002756:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0c5b      	lsrs	r3, r3, #17
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	3328      	adds	r3, #40	; 0x28
 800276e:	443b      	add	r3, r7
 8002770:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002774:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277a:	fb03 f202 	mul.w	r2, r3, r2
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e004      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	623b      	str	r3, [r7, #32]
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800279a:	623b      	str	r3, [r7, #32]
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	6a3b      	ldr	r3, [r7, #32]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3728      	adds	r7, #40	; 0x28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc90      	pop	{r4, r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	08003558 	.word	0x08003558
 80027b0:	40021000 	.word	0x40021000
 80027b4:	007a1200 	.word	0x007a1200
 80027b8:	003d0900 	.word	0x003d0900

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <HAL_RCC_GetHCLKFreq+0x10>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000000 	.word	0x20000000

080027d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d4:	f7ff fff2 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4903      	ldr	r1, [pc, #12]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08003578 	.word	0x08003578

080027f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027fc:	f7ff ffde 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0adb      	lsrs	r3, r3, #11
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <HAL_RCC_GetPCLK2Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	08003578 	.word	0x08003578

08002820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <RCC_Delay+0x34>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <RCC_Delay+0x38>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a5b      	lsrs	r3, r3, #9
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800283c:	bf00      	nop
  }
  while (Delay --);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e5a      	subs	r2, r3, #1
 8002842:	60fa      	str	r2, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <RCC_Delay+0x1c>
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	20000000 	.word	0x20000000
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e03f      	b.n	80028ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fd30 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2224      	movs	r2, #36	; 0x24
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800289e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f905 	bl	8002ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b08a      	sub	sp, #40	; 0x28
 80028fa:	af02      	add	r7, sp, #8
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	d17c      	bne.n	8002a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_UART_Transmit+0x2c>
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e075      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_UART_Transmit+0x3e>
 8002930:	2302      	movs	r3, #2
 8002932:	e06e      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800294a:	f7fe fea7 	bl	800169c <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002964:	d108      	bne.n	8002978 <HAL_UART_Transmit+0x82>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	e003      	b.n	8002980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002988:	e02a      	b.n	80029e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f840 	bl	8002a1a <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e036      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	3302      	adds	r3, #2
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e007      	b.n	80029d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1cf      	bne.n	800298a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f810 	bl	8002a1a <UART_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e006      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	4613      	mov	r3, r2
 8002a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a2a:	e02c      	b.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d028      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a3a:	f7fe fe2f 	bl	800169c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d21d      	bcs.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a58:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e00f      	b.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d0c3      	beq.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002aea:	f023 030c 	bic.w	r3, r3, #12
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <UART_SetConfig+0x114>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b18:	f7ff fe6e 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	e002      	b.n	8002b26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b20:	f7ff fe56 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 8002b24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009a      	lsls	r2, r3, #2
 8002b30:	441a      	add	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <UART_SetConfig+0x118>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	0119      	lsls	r1, r3, #4
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	441a      	add	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <UART_SetConfig+0x118>)
 8002b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2064      	movs	r0, #100	; 0x64
 8002b66:	fb00 f303 	mul.w	r3, r0, r3
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	3332      	adds	r3, #50	; 0x32
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <UART_SetConfig+0x118>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7c:	4419      	add	r1, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	009a      	lsls	r2, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <UART_SetConfig+0x118>)
 8002b96:	fba3 0302 	umull	r0, r3, r3, r2
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2064      	movs	r0, #100	; 0x64
 8002b9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	3332      	adds	r3, #50	; 0x32
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <UART_SetConfig+0x118>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	f003 020f 	and.w	r2, r3, #15
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	440a      	add	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40013800 	.word	0x40013800
 8002bc8:	51eb851f 	.word	0x51eb851f

08002bcc <__errno>:
 8002bcc:	4b01      	ldr	r3, [pc, #4]	; (8002bd4 <__errno+0x8>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2000000c 	.word	0x2000000c

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	2600      	movs	r6, #0
 8002bdc:	4d0c      	ldr	r5, [pc, #48]	; (8002c10 <__libc_init_array+0x38>)
 8002bde:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <__libc_init_array+0x3c>)
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	42a6      	cmp	r6, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	f000 fc9c 	bl	8003524 <_init>
 8002bec:	2600      	movs	r6, #0
 8002bee:	4d0a      	ldr	r5, [pc, #40]	; (8002c18 <__libc_init_array+0x40>)
 8002bf0:	4c0a      	ldr	r4, [pc, #40]	; (8002c1c <__libc_init_array+0x44>)
 8002bf2:	1b64      	subs	r4, r4, r5
 8002bf4:	10a4      	asrs	r4, r4, #2
 8002bf6:	42a6      	cmp	r6, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c00:	4798      	blx	r3
 8002c02:	3601      	adds	r6, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0a:	4798      	blx	r3
 8002c0c:	3601      	adds	r6, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	080035b4 	.word	0x080035b4
 8002c14:	080035b4 	.word	0x080035b4
 8002c18:	080035b4 	.word	0x080035b4
 8002c1c:	080035b8 	.word	0x080035b8

08002c20 <memset>:
 8002c20:	4603      	mov	r3, r0
 8002c22:	4402      	add	r2, r0
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d100      	bne.n	8002c2a <memset+0xa>
 8002c28:	4770      	bx	lr
 8002c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c2e:	e7f9      	b.n	8002c24 <memset+0x4>

08002c30 <siprintf>:
 8002c30:	b40e      	push	{r1, r2, r3}
 8002c32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c36:	b500      	push	{lr}
 8002c38:	b09c      	sub	sp, #112	; 0x70
 8002c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8002c3c:	9002      	str	r0, [sp, #8]
 8002c3e:	9006      	str	r0, [sp, #24]
 8002c40:	9107      	str	r1, [sp, #28]
 8002c42:	9104      	str	r1, [sp, #16]
 8002c44:	4808      	ldr	r0, [pc, #32]	; (8002c68 <siprintf+0x38>)
 8002c46:	4909      	ldr	r1, [pc, #36]	; (8002c6c <siprintf+0x3c>)
 8002c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c4c:	9105      	str	r1, [sp, #20]
 8002c4e:	6800      	ldr	r0, [r0, #0]
 8002c50:	a902      	add	r1, sp, #8
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	f000 f868 	bl	8002d28 <_svfiprintf_r>
 8002c58:	2200      	movs	r2, #0
 8002c5a:	9b02      	ldr	r3, [sp, #8]
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	b01c      	add	sp, #112	; 0x70
 8002c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c64:	b003      	add	sp, #12
 8002c66:	4770      	bx	lr
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	ffff0208 	.word	0xffff0208

08002c70 <__ssputs_r>:
 8002c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c74:	688e      	ldr	r6, [r1, #8]
 8002c76:	4682      	mov	sl, r0
 8002c78:	429e      	cmp	r6, r3
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	4690      	mov	r8, r2
 8002c7e:	461f      	mov	r7, r3
 8002c80:	d838      	bhi.n	8002cf4 <__ssputs_r+0x84>
 8002c82:	898a      	ldrh	r2, [r1, #12]
 8002c84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c88:	d032      	beq.n	8002cf0 <__ssputs_r+0x80>
 8002c8a:	6825      	ldr	r5, [r4, #0]
 8002c8c:	6909      	ldr	r1, [r1, #16]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	eba5 0901 	sub.w	r9, r5, r1
 8002c94:	6965      	ldr	r5, [r4, #20]
 8002c96:	444b      	add	r3, r9
 8002c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ca0:	106d      	asrs	r5, r5, #1
 8002ca2:	429d      	cmp	r5, r3
 8002ca4:	bf38      	it	cc
 8002ca6:	461d      	movcc	r5, r3
 8002ca8:	0553      	lsls	r3, r2, #21
 8002caa:	d531      	bpl.n	8002d10 <__ssputs_r+0xa0>
 8002cac:	4629      	mov	r1, r5
 8002cae:	f000 fb6f 	bl	8003390 <_malloc_r>
 8002cb2:	4606      	mov	r6, r0
 8002cb4:	b950      	cbnz	r0, 8002ccc <__ssputs_r+0x5c>
 8002cb6:	230c      	movs	r3, #12
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f8ca 3000 	str.w	r3, [sl]
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc6:	81a3      	strh	r3, [r4, #12]
 8002cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ccc:	464a      	mov	r2, r9
 8002cce:	6921      	ldr	r1, [r4, #16]
 8002cd0:	f000 face 	bl	8003270 <memcpy>
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cde:	81a3      	strh	r3, [r4, #12]
 8002ce0:	6126      	str	r6, [r4, #16]
 8002ce2:	444e      	add	r6, r9
 8002ce4:	6026      	str	r6, [r4, #0]
 8002ce6:	463e      	mov	r6, r7
 8002ce8:	6165      	str	r5, [r4, #20]
 8002cea:	eba5 0509 	sub.w	r5, r5, r9
 8002cee:	60a5      	str	r5, [r4, #8]
 8002cf0:	42be      	cmp	r6, r7
 8002cf2:	d900      	bls.n	8002cf6 <__ssputs_r+0x86>
 8002cf4:	463e      	mov	r6, r7
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	6820      	ldr	r0, [r4, #0]
 8002cfc:	f000 fac6 	bl	800328c <memmove>
 8002d00:	68a3      	ldr	r3, [r4, #8]
 8002d02:	2000      	movs	r0, #0
 8002d04:	1b9b      	subs	r3, r3, r6
 8002d06:	60a3      	str	r3, [r4, #8]
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	4433      	add	r3, r6
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	e7db      	b.n	8002cc8 <__ssputs_r+0x58>
 8002d10:	462a      	mov	r2, r5
 8002d12:	f000 fbb1 	bl	8003478 <_realloc_r>
 8002d16:	4606      	mov	r6, r0
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d1e1      	bne.n	8002ce0 <__ssputs_r+0x70>
 8002d1c:	4650      	mov	r0, sl
 8002d1e:	6921      	ldr	r1, [r4, #16]
 8002d20:	f000 face 	bl	80032c0 <_free_r>
 8002d24:	e7c7      	b.n	8002cb6 <__ssputs_r+0x46>
	...

08002d28 <_svfiprintf_r>:
 8002d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2c:	4698      	mov	r8, r3
 8002d2e:	898b      	ldrh	r3, [r1, #12]
 8002d30:	4607      	mov	r7, r0
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	460d      	mov	r5, r1
 8002d36:	4614      	mov	r4, r2
 8002d38:	b09d      	sub	sp, #116	; 0x74
 8002d3a:	d50e      	bpl.n	8002d5a <_svfiprintf_r+0x32>
 8002d3c:	690b      	ldr	r3, [r1, #16]
 8002d3e:	b963      	cbnz	r3, 8002d5a <_svfiprintf_r+0x32>
 8002d40:	2140      	movs	r1, #64	; 0x40
 8002d42:	f000 fb25 	bl	8003390 <_malloc_r>
 8002d46:	6028      	str	r0, [r5, #0]
 8002d48:	6128      	str	r0, [r5, #16]
 8002d4a:	b920      	cbnz	r0, 8002d56 <_svfiprintf_r+0x2e>
 8002d4c:	230c      	movs	r3, #12
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	e0d1      	b.n	8002efa <_svfiprintf_r+0x1d2>
 8002d56:	2340      	movs	r3, #64	; 0x40
 8002d58:	616b      	str	r3, [r5, #20]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d5e:	2320      	movs	r3, #32
 8002d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d64:	2330      	movs	r3, #48	; 0x30
 8002d66:	f04f 0901 	mov.w	r9, #1
 8002d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f14 <_svfiprintf_r+0x1ec>
 8002d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d76:	4623      	mov	r3, r4
 8002d78:	469a      	mov	sl, r3
 8002d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d7e:	b10a      	cbz	r2, 8002d84 <_svfiprintf_r+0x5c>
 8002d80:	2a25      	cmp	r2, #37	; 0x25
 8002d82:	d1f9      	bne.n	8002d78 <_svfiprintf_r+0x50>
 8002d84:	ebba 0b04 	subs.w	fp, sl, r4
 8002d88:	d00b      	beq.n	8002da2 <_svfiprintf_r+0x7a>
 8002d8a:	465b      	mov	r3, fp
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	4638      	mov	r0, r7
 8002d92:	f7ff ff6d 	bl	8002c70 <__ssputs_r>
 8002d96:	3001      	adds	r0, #1
 8002d98:	f000 80aa 	beq.w	8002ef0 <_svfiprintf_r+0x1c8>
 8002d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d9e:	445a      	add	r2, fp
 8002da0:	9209      	str	r2, [sp, #36]	; 0x24
 8002da2:	f89a 3000 	ldrb.w	r3, [sl]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80a2 	beq.w	8002ef0 <_svfiprintf_r+0x1c8>
 8002dac:	2300      	movs	r3, #0
 8002dae:	f04f 32ff 	mov.w	r2, #4294967295
 8002db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002db6:	f10a 0a01 	add.w	sl, sl, #1
 8002dba:	9304      	str	r3, [sp, #16]
 8002dbc:	9307      	str	r3, [sp, #28]
 8002dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8002dc4:	4654      	mov	r4, sl
 8002dc6:	2205      	movs	r2, #5
 8002dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dcc:	4851      	ldr	r0, [pc, #324]	; (8002f14 <_svfiprintf_r+0x1ec>)
 8002dce:	f000 fa41 	bl	8003254 <memchr>
 8002dd2:	9a04      	ldr	r2, [sp, #16]
 8002dd4:	b9d8      	cbnz	r0, 8002e0e <_svfiprintf_r+0xe6>
 8002dd6:	06d0      	lsls	r0, r2, #27
 8002dd8:	bf44      	itt	mi
 8002dda:	2320      	movmi	r3, #32
 8002ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002de0:	0711      	lsls	r1, r2, #28
 8002de2:	bf44      	itt	mi
 8002de4:	232b      	movmi	r3, #43	; 0x2b
 8002de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dea:	f89a 3000 	ldrb.w	r3, [sl]
 8002dee:	2b2a      	cmp	r3, #42	; 0x2a
 8002df0:	d015      	beq.n	8002e1e <_svfiprintf_r+0xf6>
 8002df2:	4654      	mov	r4, sl
 8002df4:	2000      	movs	r0, #0
 8002df6:	f04f 0c0a 	mov.w	ip, #10
 8002dfa:	9a07      	ldr	r2, [sp, #28]
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e02:	3b30      	subs	r3, #48	; 0x30
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	d94e      	bls.n	8002ea6 <_svfiprintf_r+0x17e>
 8002e08:	b1b0      	cbz	r0, 8002e38 <_svfiprintf_r+0x110>
 8002e0a:	9207      	str	r2, [sp, #28]
 8002e0c:	e014      	b.n	8002e38 <_svfiprintf_r+0x110>
 8002e0e:	eba0 0308 	sub.w	r3, r0, r8
 8002e12:	fa09 f303 	lsl.w	r3, r9, r3
 8002e16:	4313      	orrs	r3, r2
 8002e18:	46a2      	mov	sl, r4
 8002e1a:	9304      	str	r3, [sp, #16]
 8002e1c:	e7d2      	b.n	8002dc4 <_svfiprintf_r+0x9c>
 8002e1e:	9b03      	ldr	r3, [sp, #12]
 8002e20:	1d19      	adds	r1, r3, #4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	9103      	str	r1, [sp, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bfbb      	ittet	lt
 8002e2a:	425b      	neglt	r3, r3
 8002e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e30:	9307      	strge	r3, [sp, #28]
 8002e32:	9307      	strlt	r3, [sp, #28]
 8002e34:	bfb8      	it	lt
 8002e36:	9204      	strlt	r2, [sp, #16]
 8002e38:	7823      	ldrb	r3, [r4, #0]
 8002e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e3c:	d10c      	bne.n	8002e58 <_svfiprintf_r+0x130>
 8002e3e:	7863      	ldrb	r3, [r4, #1]
 8002e40:	2b2a      	cmp	r3, #42	; 0x2a
 8002e42:	d135      	bne.n	8002eb0 <_svfiprintf_r+0x188>
 8002e44:	9b03      	ldr	r3, [sp, #12]
 8002e46:	3402      	adds	r4, #2
 8002e48:	1d1a      	adds	r2, r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	9203      	str	r2, [sp, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bfb8      	it	lt
 8002e52:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e56:	9305      	str	r3, [sp, #20]
 8002e58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002f18 <_svfiprintf_r+0x1f0>
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	4650      	mov	r0, sl
 8002e60:	7821      	ldrb	r1, [r4, #0]
 8002e62:	f000 f9f7 	bl	8003254 <memchr>
 8002e66:	b140      	cbz	r0, 8002e7a <_svfiprintf_r+0x152>
 8002e68:	2340      	movs	r3, #64	; 0x40
 8002e6a:	eba0 000a 	sub.w	r0, r0, sl
 8002e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8002e72:	9b04      	ldr	r3, [sp, #16]
 8002e74:	3401      	adds	r4, #1
 8002e76:	4303      	orrs	r3, r0
 8002e78:	9304      	str	r3, [sp, #16]
 8002e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e7e:	2206      	movs	r2, #6
 8002e80:	4826      	ldr	r0, [pc, #152]	; (8002f1c <_svfiprintf_r+0x1f4>)
 8002e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e86:	f000 f9e5 	bl	8003254 <memchr>
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d038      	beq.n	8002f00 <_svfiprintf_r+0x1d8>
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <_svfiprintf_r+0x1f8>)
 8002e90:	bb1b      	cbnz	r3, 8002eda <_svfiprintf_r+0x1b2>
 8002e92:	9b03      	ldr	r3, [sp, #12]
 8002e94:	3307      	adds	r3, #7
 8002e96:	f023 0307 	bic.w	r3, r3, #7
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	9303      	str	r3, [sp, #12]
 8002e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea0:	4433      	add	r3, r6
 8002ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea4:	e767      	b.n	8002d76 <_svfiprintf_r+0x4e>
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eae:	e7a5      	b.n	8002dfc <_svfiprintf_r+0xd4>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f04f 0c0a 	mov.w	ip, #10
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	3401      	adds	r4, #1
 8002eba:	9305      	str	r3, [sp, #20]
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ec2:	3a30      	subs	r2, #48	; 0x30
 8002ec4:	2a09      	cmp	r2, #9
 8002ec6:	d903      	bls.n	8002ed0 <_svfiprintf_r+0x1a8>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0c5      	beq.n	8002e58 <_svfiprintf_r+0x130>
 8002ecc:	9105      	str	r1, [sp, #20]
 8002ece:	e7c3      	b.n	8002e58 <_svfiprintf_r+0x130>
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ed8:	e7f0      	b.n	8002ebc <_svfiprintf_r+0x194>
 8002eda:	ab03      	add	r3, sp, #12
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	462a      	mov	r2, r5
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <_svfiprintf_r+0x1fc>)
 8002ee4:	a904      	add	r1, sp, #16
 8002ee6:	f3af 8000 	nop.w
 8002eea:	1c42      	adds	r2, r0, #1
 8002eec:	4606      	mov	r6, r0
 8002eee:	d1d6      	bne.n	8002e9e <_svfiprintf_r+0x176>
 8002ef0:	89ab      	ldrh	r3, [r5, #12]
 8002ef2:	065b      	lsls	r3, r3, #25
 8002ef4:	f53f af2c 	bmi.w	8002d50 <_svfiprintf_r+0x28>
 8002ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002efa:	b01d      	add	sp, #116	; 0x74
 8002efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f00:	ab03      	add	r3, sp, #12
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	462a      	mov	r2, r5
 8002f06:	4638      	mov	r0, r7
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <_svfiprintf_r+0x1fc>)
 8002f0a:	a904      	add	r1, sp, #16
 8002f0c:	f000 f87c 	bl	8003008 <_printf_i>
 8002f10:	e7eb      	b.n	8002eea <_svfiprintf_r+0x1c2>
 8002f12:	bf00      	nop
 8002f14:	08003580 	.word	0x08003580
 8002f18:	08003586 	.word	0x08003586
 8002f1c:	0800358a 	.word	0x0800358a
 8002f20:	00000000 	.word	0x00000000
 8002f24:	08002c71 	.word	0x08002c71

08002f28 <_printf_common>:
 8002f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f2c:	4616      	mov	r6, r2
 8002f2e:	4699      	mov	r9, r3
 8002f30:	688a      	ldr	r2, [r1, #8]
 8002f32:	690b      	ldr	r3, [r1, #16]
 8002f34:	4607      	mov	r7, r0
 8002f36:	4293      	cmp	r3, r2
 8002f38:	bfb8      	it	lt
 8002f3a:	4613      	movlt	r3, r2
 8002f3c:	6033      	str	r3, [r6, #0]
 8002f3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f42:	460c      	mov	r4, r1
 8002f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f48:	b10a      	cbz	r2, 8002f4e <_printf_common+0x26>
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	6033      	str	r3, [r6, #0]
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	0699      	lsls	r1, r3, #26
 8002f52:	bf42      	ittt	mi
 8002f54:	6833      	ldrmi	r3, [r6, #0]
 8002f56:	3302      	addmi	r3, #2
 8002f58:	6033      	strmi	r3, [r6, #0]
 8002f5a:	6825      	ldr	r5, [r4, #0]
 8002f5c:	f015 0506 	ands.w	r5, r5, #6
 8002f60:	d106      	bne.n	8002f70 <_printf_common+0x48>
 8002f62:	f104 0a19 	add.w	sl, r4, #25
 8002f66:	68e3      	ldr	r3, [r4, #12]
 8002f68:	6832      	ldr	r2, [r6, #0]
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	42ab      	cmp	r3, r5
 8002f6e:	dc28      	bgt.n	8002fc2 <_printf_common+0x9a>
 8002f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f74:	1e13      	subs	r3, r2, #0
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	bf18      	it	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	0692      	lsls	r2, r2, #26
 8002f7e:	d42d      	bmi.n	8002fdc <_printf_common+0xb4>
 8002f80:	4649      	mov	r1, r9
 8002f82:	4638      	mov	r0, r7
 8002f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f88:	47c0      	blx	r8
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d020      	beq.n	8002fd0 <_printf_common+0xa8>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	68e5      	ldr	r5, [r4, #12]
 8002f92:	f003 0306 	and.w	r3, r3, #6
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf18      	it	ne
 8002f9a:	2500      	movne	r5, #0
 8002f9c:	6832      	ldr	r2, [r6, #0]
 8002f9e:	f04f 0600 	mov.w	r6, #0
 8002fa2:	68a3      	ldr	r3, [r4, #8]
 8002fa4:	bf08      	it	eq
 8002fa6:	1aad      	subeq	r5, r5, r2
 8002fa8:	6922      	ldr	r2, [r4, #16]
 8002faa:	bf08      	it	eq
 8002fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bfc4      	itt	gt
 8002fb4:	1a9b      	subgt	r3, r3, r2
 8002fb6:	18ed      	addgt	r5, r5, r3
 8002fb8:	341a      	adds	r4, #26
 8002fba:	42b5      	cmp	r5, r6
 8002fbc:	d11a      	bne.n	8002ff4 <_printf_common+0xcc>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e008      	b.n	8002fd4 <_printf_common+0xac>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4652      	mov	r2, sl
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	4638      	mov	r0, r7
 8002fca:	47c0      	blx	r8
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d103      	bne.n	8002fd8 <_printf_common+0xb0>
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd8:	3501      	adds	r5, #1
 8002fda:	e7c4      	b.n	8002f66 <_printf_common+0x3e>
 8002fdc:	2030      	movs	r0, #48	; 0x30
 8002fde:	18e1      	adds	r1, r4, r3
 8002fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fea:	4422      	add	r2, r4
 8002fec:	3302      	adds	r3, #2
 8002fee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ff2:	e7c5      	b.n	8002f80 <_printf_common+0x58>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	47c0      	blx	r8
 8002ffe:	3001      	adds	r0, #1
 8003000:	d0e6      	beq.n	8002fd0 <_printf_common+0xa8>
 8003002:	3601      	adds	r6, #1
 8003004:	e7d9      	b.n	8002fba <_printf_common+0x92>
	...

08003008 <_printf_i>:
 8003008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800300c:	7e0f      	ldrb	r7, [r1, #24]
 800300e:	4691      	mov	r9, r2
 8003010:	2f78      	cmp	r7, #120	; 0x78
 8003012:	4680      	mov	r8, r0
 8003014:	460c      	mov	r4, r1
 8003016:	469a      	mov	sl, r3
 8003018:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800301a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800301e:	d807      	bhi.n	8003030 <_printf_i+0x28>
 8003020:	2f62      	cmp	r7, #98	; 0x62
 8003022:	d80a      	bhi.n	800303a <_printf_i+0x32>
 8003024:	2f00      	cmp	r7, #0
 8003026:	f000 80d9 	beq.w	80031dc <_printf_i+0x1d4>
 800302a:	2f58      	cmp	r7, #88	; 0x58
 800302c:	f000 80a4 	beq.w	8003178 <_printf_i+0x170>
 8003030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003038:	e03a      	b.n	80030b0 <_printf_i+0xa8>
 800303a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800303e:	2b15      	cmp	r3, #21
 8003040:	d8f6      	bhi.n	8003030 <_printf_i+0x28>
 8003042:	a101      	add	r1, pc, #4	; (adr r1, 8003048 <_printf_i+0x40>)
 8003044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003048:	080030a1 	.word	0x080030a1
 800304c:	080030b5 	.word	0x080030b5
 8003050:	08003031 	.word	0x08003031
 8003054:	08003031 	.word	0x08003031
 8003058:	08003031 	.word	0x08003031
 800305c:	08003031 	.word	0x08003031
 8003060:	080030b5 	.word	0x080030b5
 8003064:	08003031 	.word	0x08003031
 8003068:	08003031 	.word	0x08003031
 800306c:	08003031 	.word	0x08003031
 8003070:	08003031 	.word	0x08003031
 8003074:	080031c3 	.word	0x080031c3
 8003078:	080030e5 	.word	0x080030e5
 800307c:	080031a5 	.word	0x080031a5
 8003080:	08003031 	.word	0x08003031
 8003084:	08003031 	.word	0x08003031
 8003088:	080031e5 	.word	0x080031e5
 800308c:	08003031 	.word	0x08003031
 8003090:	080030e5 	.word	0x080030e5
 8003094:	08003031 	.word	0x08003031
 8003098:	08003031 	.word	0x08003031
 800309c:	080031ad 	.word	0x080031ad
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	1d1a      	adds	r2, r3, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	602a      	str	r2, [r5, #0]
 80030a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0a4      	b.n	80031fe <_printf_i+0x1f6>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	6829      	ldr	r1, [r5, #0]
 80030b8:	0606      	lsls	r6, r0, #24
 80030ba:	f101 0304 	add.w	r3, r1, #4
 80030be:	d50a      	bpl.n	80030d6 <_printf_i+0xce>
 80030c0:	680e      	ldr	r6, [r1, #0]
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	2e00      	cmp	r6, #0
 80030c6:	da03      	bge.n	80030d0 <_printf_i+0xc8>
 80030c8:	232d      	movs	r3, #45	; 0x2d
 80030ca:	4276      	negs	r6, r6
 80030cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030d0:	230a      	movs	r3, #10
 80030d2:	485e      	ldr	r0, [pc, #376]	; (800324c <_printf_i+0x244>)
 80030d4:	e019      	b.n	800310a <_printf_i+0x102>
 80030d6:	680e      	ldr	r6, [r1, #0]
 80030d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	bf18      	it	ne
 80030e0:	b236      	sxthne	r6, r6
 80030e2:	e7ef      	b.n	80030c4 <_printf_i+0xbc>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	1d19      	adds	r1, r3, #4
 80030ea:	6029      	str	r1, [r5, #0]
 80030ec:	0601      	lsls	r1, r0, #24
 80030ee:	d501      	bpl.n	80030f4 <_printf_i+0xec>
 80030f0:	681e      	ldr	r6, [r3, #0]
 80030f2:	e002      	b.n	80030fa <_printf_i+0xf2>
 80030f4:	0646      	lsls	r6, r0, #25
 80030f6:	d5fb      	bpl.n	80030f0 <_printf_i+0xe8>
 80030f8:	881e      	ldrh	r6, [r3, #0]
 80030fa:	2f6f      	cmp	r7, #111	; 0x6f
 80030fc:	bf0c      	ite	eq
 80030fe:	2308      	moveq	r3, #8
 8003100:	230a      	movne	r3, #10
 8003102:	4852      	ldr	r0, [pc, #328]	; (800324c <_printf_i+0x244>)
 8003104:	2100      	movs	r1, #0
 8003106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800310a:	6865      	ldr	r5, [r4, #4]
 800310c:	2d00      	cmp	r5, #0
 800310e:	bfa8      	it	ge
 8003110:	6821      	ldrge	r1, [r4, #0]
 8003112:	60a5      	str	r5, [r4, #8]
 8003114:	bfa4      	itt	ge
 8003116:	f021 0104 	bicge.w	r1, r1, #4
 800311a:	6021      	strge	r1, [r4, #0]
 800311c:	b90e      	cbnz	r6, 8003122 <_printf_i+0x11a>
 800311e:	2d00      	cmp	r5, #0
 8003120:	d04d      	beq.n	80031be <_printf_i+0x1b6>
 8003122:	4615      	mov	r5, r2
 8003124:	fbb6 f1f3 	udiv	r1, r6, r3
 8003128:	fb03 6711 	mls	r7, r3, r1, r6
 800312c:	5dc7      	ldrb	r7, [r0, r7]
 800312e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003132:	4637      	mov	r7, r6
 8003134:	42bb      	cmp	r3, r7
 8003136:	460e      	mov	r6, r1
 8003138:	d9f4      	bls.n	8003124 <_printf_i+0x11c>
 800313a:	2b08      	cmp	r3, #8
 800313c:	d10b      	bne.n	8003156 <_printf_i+0x14e>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	07de      	lsls	r6, r3, #31
 8003142:	d508      	bpl.n	8003156 <_printf_i+0x14e>
 8003144:	6923      	ldr	r3, [r4, #16]
 8003146:	6861      	ldr	r1, [r4, #4]
 8003148:	4299      	cmp	r1, r3
 800314a:	bfde      	ittt	le
 800314c:	2330      	movle	r3, #48	; 0x30
 800314e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003152:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003156:	1b52      	subs	r2, r2, r5
 8003158:	6122      	str	r2, [r4, #16]
 800315a:	464b      	mov	r3, r9
 800315c:	4621      	mov	r1, r4
 800315e:	4640      	mov	r0, r8
 8003160:	f8cd a000 	str.w	sl, [sp]
 8003164:	aa03      	add	r2, sp, #12
 8003166:	f7ff fedf 	bl	8002f28 <_printf_common>
 800316a:	3001      	adds	r0, #1
 800316c:	d14c      	bne.n	8003208 <_printf_i+0x200>
 800316e:	f04f 30ff 	mov.w	r0, #4294967295
 8003172:	b004      	add	sp, #16
 8003174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003178:	4834      	ldr	r0, [pc, #208]	; (800324c <_printf_i+0x244>)
 800317a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800317e:	6829      	ldr	r1, [r5, #0]
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	f851 6b04 	ldr.w	r6, [r1], #4
 8003186:	6029      	str	r1, [r5, #0]
 8003188:	061d      	lsls	r5, r3, #24
 800318a:	d514      	bpl.n	80031b6 <_printf_i+0x1ae>
 800318c:	07df      	lsls	r7, r3, #31
 800318e:	bf44      	itt	mi
 8003190:	f043 0320 	orrmi.w	r3, r3, #32
 8003194:	6023      	strmi	r3, [r4, #0]
 8003196:	b91e      	cbnz	r6, 80031a0 <_printf_i+0x198>
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	f023 0320 	bic.w	r3, r3, #32
 800319e:	6023      	str	r3, [r4, #0]
 80031a0:	2310      	movs	r3, #16
 80031a2:	e7af      	b.n	8003104 <_printf_i+0xfc>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	6023      	str	r3, [r4, #0]
 80031ac:	2378      	movs	r3, #120	; 0x78
 80031ae:	4828      	ldr	r0, [pc, #160]	; (8003250 <_printf_i+0x248>)
 80031b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031b4:	e7e3      	b.n	800317e <_printf_i+0x176>
 80031b6:	0659      	lsls	r1, r3, #25
 80031b8:	bf48      	it	mi
 80031ba:	b2b6      	uxthmi	r6, r6
 80031bc:	e7e6      	b.n	800318c <_printf_i+0x184>
 80031be:	4615      	mov	r5, r2
 80031c0:	e7bb      	b.n	800313a <_printf_i+0x132>
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	6826      	ldr	r6, [r4, #0]
 80031c6:	1d18      	adds	r0, r3, #4
 80031c8:	6961      	ldr	r1, [r4, #20]
 80031ca:	6028      	str	r0, [r5, #0]
 80031cc:	0635      	lsls	r5, r6, #24
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	d501      	bpl.n	80031d6 <_printf_i+0x1ce>
 80031d2:	6019      	str	r1, [r3, #0]
 80031d4:	e002      	b.n	80031dc <_printf_i+0x1d4>
 80031d6:	0670      	lsls	r0, r6, #25
 80031d8:	d5fb      	bpl.n	80031d2 <_printf_i+0x1ca>
 80031da:	8019      	strh	r1, [r3, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	4615      	mov	r5, r2
 80031e0:	6123      	str	r3, [r4, #16]
 80031e2:	e7ba      	b.n	800315a <_printf_i+0x152>
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	2100      	movs	r1, #0
 80031e8:	1d1a      	adds	r2, r3, #4
 80031ea:	602a      	str	r2, [r5, #0]
 80031ec:	681d      	ldr	r5, [r3, #0]
 80031ee:	6862      	ldr	r2, [r4, #4]
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f82f 	bl	8003254 <memchr>
 80031f6:	b108      	cbz	r0, 80031fc <_printf_i+0x1f4>
 80031f8:	1b40      	subs	r0, r0, r5
 80031fa:	6060      	str	r0, [r4, #4]
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	6123      	str	r3, [r4, #16]
 8003200:	2300      	movs	r3, #0
 8003202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003206:	e7a8      	b.n	800315a <_printf_i+0x152>
 8003208:	462a      	mov	r2, r5
 800320a:	4649      	mov	r1, r9
 800320c:	4640      	mov	r0, r8
 800320e:	6923      	ldr	r3, [r4, #16]
 8003210:	47d0      	blx	sl
 8003212:	3001      	adds	r0, #1
 8003214:	d0ab      	beq.n	800316e <_printf_i+0x166>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	079b      	lsls	r3, r3, #30
 800321a:	d413      	bmi.n	8003244 <_printf_i+0x23c>
 800321c:	68e0      	ldr	r0, [r4, #12]
 800321e:	9b03      	ldr	r3, [sp, #12]
 8003220:	4298      	cmp	r0, r3
 8003222:	bfb8      	it	lt
 8003224:	4618      	movlt	r0, r3
 8003226:	e7a4      	b.n	8003172 <_printf_i+0x16a>
 8003228:	2301      	movs	r3, #1
 800322a:	4632      	mov	r2, r6
 800322c:	4649      	mov	r1, r9
 800322e:	4640      	mov	r0, r8
 8003230:	47d0      	blx	sl
 8003232:	3001      	adds	r0, #1
 8003234:	d09b      	beq.n	800316e <_printf_i+0x166>
 8003236:	3501      	adds	r5, #1
 8003238:	68e3      	ldr	r3, [r4, #12]
 800323a:	9903      	ldr	r1, [sp, #12]
 800323c:	1a5b      	subs	r3, r3, r1
 800323e:	42ab      	cmp	r3, r5
 8003240:	dcf2      	bgt.n	8003228 <_printf_i+0x220>
 8003242:	e7eb      	b.n	800321c <_printf_i+0x214>
 8003244:	2500      	movs	r5, #0
 8003246:	f104 0619 	add.w	r6, r4, #25
 800324a:	e7f5      	b.n	8003238 <_printf_i+0x230>
 800324c:	08003591 	.word	0x08003591
 8003250:	080035a2 	.word	0x080035a2

08003254 <memchr>:
 8003254:	4603      	mov	r3, r0
 8003256:	b510      	push	{r4, lr}
 8003258:	b2c9      	uxtb	r1, r1
 800325a:	4402      	add	r2, r0
 800325c:	4293      	cmp	r3, r2
 800325e:	4618      	mov	r0, r3
 8003260:	d101      	bne.n	8003266 <memchr+0x12>
 8003262:	2000      	movs	r0, #0
 8003264:	e003      	b.n	800326e <memchr+0x1a>
 8003266:	7804      	ldrb	r4, [r0, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	428c      	cmp	r4, r1
 800326c:	d1f6      	bne.n	800325c <memchr+0x8>
 800326e:	bd10      	pop	{r4, pc}

08003270 <memcpy>:
 8003270:	440a      	add	r2, r1
 8003272:	4291      	cmp	r1, r2
 8003274:	f100 33ff 	add.w	r3, r0, #4294967295
 8003278:	d100      	bne.n	800327c <memcpy+0xc>
 800327a:	4770      	bx	lr
 800327c:	b510      	push	{r4, lr}
 800327e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003282:	4291      	cmp	r1, r2
 8003284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003288:	d1f9      	bne.n	800327e <memcpy+0xe>
 800328a:	bd10      	pop	{r4, pc}

0800328c <memmove>:
 800328c:	4288      	cmp	r0, r1
 800328e:	b510      	push	{r4, lr}
 8003290:	eb01 0402 	add.w	r4, r1, r2
 8003294:	d902      	bls.n	800329c <memmove+0x10>
 8003296:	4284      	cmp	r4, r0
 8003298:	4623      	mov	r3, r4
 800329a:	d807      	bhi.n	80032ac <memmove+0x20>
 800329c:	1e43      	subs	r3, r0, #1
 800329e:	42a1      	cmp	r1, r4
 80032a0:	d008      	beq.n	80032b4 <memmove+0x28>
 80032a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032aa:	e7f8      	b.n	800329e <memmove+0x12>
 80032ac:	4601      	mov	r1, r0
 80032ae:	4402      	add	r2, r0
 80032b0:	428a      	cmp	r2, r1
 80032b2:	d100      	bne.n	80032b6 <memmove+0x2a>
 80032b4:	bd10      	pop	{r4, pc}
 80032b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032be:	e7f7      	b.n	80032b0 <memmove+0x24>

080032c0 <_free_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4605      	mov	r5, r0
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d040      	beq.n	800334a <_free_r+0x8a>
 80032c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032cc:	1f0c      	subs	r4, r1, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bfb8      	it	lt
 80032d2:	18e4      	addlt	r4, r4, r3
 80032d4:	f000 f910 	bl	80034f8 <__malloc_lock>
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <_free_r+0x8c>)
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	b933      	cbnz	r3, 80032ec <_free_r+0x2c>
 80032de:	6063      	str	r3, [r4, #4]
 80032e0:	6014      	str	r4, [r2, #0]
 80032e2:	4628      	mov	r0, r5
 80032e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e8:	f000 b90c 	b.w	8003504 <__malloc_unlock>
 80032ec:	42a3      	cmp	r3, r4
 80032ee:	d908      	bls.n	8003302 <_free_r+0x42>
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	1821      	adds	r1, r4, r0
 80032f4:	428b      	cmp	r3, r1
 80032f6:	bf01      	itttt	eq
 80032f8:	6819      	ldreq	r1, [r3, #0]
 80032fa:	685b      	ldreq	r3, [r3, #4]
 80032fc:	1809      	addeq	r1, r1, r0
 80032fe:	6021      	streq	r1, [r4, #0]
 8003300:	e7ed      	b.n	80032de <_free_r+0x1e>
 8003302:	461a      	mov	r2, r3
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	b10b      	cbz	r3, 800330c <_free_r+0x4c>
 8003308:	42a3      	cmp	r3, r4
 800330a:	d9fa      	bls.n	8003302 <_free_r+0x42>
 800330c:	6811      	ldr	r1, [r2, #0]
 800330e:	1850      	adds	r0, r2, r1
 8003310:	42a0      	cmp	r0, r4
 8003312:	d10b      	bne.n	800332c <_free_r+0x6c>
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	4401      	add	r1, r0
 8003318:	1850      	adds	r0, r2, r1
 800331a:	4283      	cmp	r3, r0
 800331c:	6011      	str	r1, [r2, #0]
 800331e:	d1e0      	bne.n	80032e2 <_free_r+0x22>
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4401      	add	r1, r0
 8003326:	6011      	str	r1, [r2, #0]
 8003328:	6053      	str	r3, [r2, #4]
 800332a:	e7da      	b.n	80032e2 <_free_r+0x22>
 800332c:	d902      	bls.n	8003334 <_free_r+0x74>
 800332e:	230c      	movs	r3, #12
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	e7d6      	b.n	80032e2 <_free_r+0x22>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	1821      	adds	r1, r4, r0
 8003338:	428b      	cmp	r3, r1
 800333a:	bf01      	itttt	eq
 800333c:	6819      	ldreq	r1, [r3, #0]
 800333e:	685b      	ldreq	r3, [r3, #4]
 8003340:	1809      	addeq	r1, r1, r0
 8003342:	6021      	streq	r1, [r4, #0]
 8003344:	6063      	str	r3, [r4, #4]
 8003346:	6054      	str	r4, [r2, #4]
 8003348:	e7cb      	b.n	80032e2 <_free_r+0x22>
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	20000290 	.word	0x20000290

08003350 <sbrk_aligned>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	4e0e      	ldr	r6, [pc, #56]	; (800338c <sbrk_aligned+0x3c>)
 8003354:	460c      	mov	r4, r1
 8003356:	6831      	ldr	r1, [r6, #0]
 8003358:	4605      	mov	r5, r0
 800335a:	b911      	cbnz	r1, 8003362 <sbrk_aligned+0x12>
 800335c:	f000 f8bc 	bl	80034d8 <_sbrk_r>
 8003360:	6030      	str	r0, [r6, #0]
 8003362:	4621      	mov	r1, r4
 8003364:	4628      	mov	r0, r5
 8003366:	f000 f8b7 	bl	80034d8 <_sbrk_r>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d00a      	beq.n	8003384 <sbrk_aligned+0x34>
 800336e:	1cc4      	adds	r4, r0, #3
 8003370:	f024 0403 	bic.w	r4, r4, #3
 8003374:	42a0      	cmp	r0, r4
 8003376:	d007      	beq.n	8003388 <sbrk_aligned+0x38>
 8003378:	1a21      	subs	r1, r4, r0
 800337a:	4628      	mov	r0, r5
 800337c:	f000 f8ac 	bl	80034d8 <_sbrk_r>
 8003380:	3001      	adds	r0, #1
 8003382:	d101      	bne.n	8003388 <sbrk_aligned+0x38>
 8003384:	f04f 34ff 	mov.w	r4, #4294967295
 8003388:	4620      	mov	r0, r4
 800338a:	bd70      	pop	{r4, r5, r6, pc}
 800338c:	20000294 	.word	0x20000294

08003390 <_malloc_r>:
 8003390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003394:	1ccd      	adds	r5, r1, #3
 8003396:	f025 0503 	bic.w	r5, r5, #3
 800339a:	3508      	adds	r5, #8
 800339c:	2d0c      	cmp	r5, #12
 800339e:	bf38      	it	cc
 80033a0:	250c      	movcc	r5, #12
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	4607      	mov	r7, r0
 80033a6:	db01      	blt.n	80033ac <_malloc_r+0x1c>
 80033a8:	42a9      	cmp	r1, r5
 80033aa:	d905      	bls.n	80033b8 <_malloc_r+0x28>
 80033ac:	230c      	movs	r3, #12
 80033ae:	2600      	movs	r6, #0
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4630      	mov	r0, r6
 80033b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b8:	4e2e      	ldr	r6, [pc, #184]	; (8003474 <_malloc_r+0xe4>)
 80033ba:	f000 f89d 	bl	80034f8 <__malloc_lock>
 80033be:	6833      	ldr	r3, [r6, #0]
 80033c0:	461c      	mov	r4, r3
 80033c2:	bb34      	cbnz	r4, 8003412 <_malloc_r+0x82>
 80033c4:	4629      	mov	r1, r5
 80033c6:	4638      	mov	r0, r7
 80033c8:	f7ff ffc2 	bl	8003350 <sbrk_aligned>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	4604      	mov	r4, r0
 80033d0:	d14d      	bne.n	800346e <_malloc_r+0xde>
 80033d2:	6834      	ldr	r4, [r6, #0]
 80033d4:	4626      	mov	r6, r4
 80033d6:	2e00      	cmp	r6, #0
 80033d8:	d140      	bne.n	800345c <_malloc_r+0xcc>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	4631      	mov	r1, r6
 80033de:	4638      	mov	r0, r7
 80033e0:	eb04 0803 	add.w	r8, r4, r3
 80033e4:	f000 f878 	bl	80034d8 <_sbrk_r>
 80033e8:	4580      	cmp	r8, r0
 80033ea:	d13a      	bne.n	8003462 <_malloc_r+0xd2>
 80033ec:	6821      	ldr	r1, [r4, #0]
 80033ee:	3503      	adds	r5, #3
 80033f0:	1a6d      	subs	r5, r5, r1
 80033f2:	f025 0503 	bic.w	r5, r5, #3
 80033f6:	3508      	adds	r5, #8
 80033f8:	2d0c      	cmp	r5, #12
 80033fa:	bf38      	it	cc
 80033fc:	250c      	movcc	r5, #12
 80033fe:	4638      	mov	r0, r7
 8003400:	4629      	mov	r1, r5
 8003402:	f7ff ffa5 	bl	8003350 <sbrk_aligned>
 8003406:	3001      	adds	r0, #1
 8003408:	d02b      	beq.n	8003462 <_malloc_r+0xd2>
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	442b      	add	r3, r5
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	e00e      	b.n	8003430 <_malloc_r+0xa0>
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	1b52      	subs	r2, r2, r5
 8003416:	d41e      	bmi.n	8003456 <_malloc_r+0xc6>
 8003418:	2a0b      	cmp	r2, #11
 800341a:	d916      	bls.n	800344a <_malloc_r+0xba>
 800341c:	1961      	adds	r1, r4, r5
 800341e:	42a3      	cmp	r3, r4
 8003420:	6025      	str	r5, [r4, #0]
 8003422:	bf18      	it	ne
 8003424:	6059      	strne	r1, [r3, #4]
 8003426:	6863      	ldr	r3, [r4, #4]
 8003428:	bf08      	it	eq
 800342a:	6031      	streq	r1, [r6, #0]
 800342c:	5162      	str	r2, [r4, r5]
 800342e:	604b      	str	r3, [r1, #4]
 8003430:	4638      	mov	r0, r7
 8003432:	f104 060b 	add.w	r6, r4, #11
 8003436:	f000 f865 	bl	8003504 <__malloc_unlock>
 800343a:	f026 0607 	bic.w	r6, r6, #7
 800343e:	1d23      	adds	r3, r4, #4
 8003440:	1af2      	subs	r2, r6, r3
 8003442:	d0b6      	beq.n	80033b2 <_malloc_r+0x22>
 8003444:	1b9b      	subs	r3, r3, r6
 8003446:	50a3      	str	r3, [r4, r2]
 8003448:	e7b3      	b.n	80033b2 <_malloc_r+0x22>
 800344a:	6862      	ldr	r2, [r4, #4]
 800344c:	42a3      	cmp	r3, r4
 800344e:	bf0c      	ite	eq
 8003450:	6032      	streq	r2, [r6, #0]
 8003452:	605a      	strne	r2, [r3, #4]
 8003454:	e7ec      	b.n	8003430 <_malloc_r+0xa0>
 8003456:	4623      	mov	r3, r4
 8003458:	6864      	ldr	r4, [r4, #4]
 800345a:	e7b2      	b.n	80033c2 <_malloc_r+0x32>
 800345c:	4634      	mov	r4, r6
 800345e:	6876      	ldr	r6, [r6, #4]
 8003460:	e7b9      	b.n	80033d6 <_malloc_r+0x46>
 8003462:	230c      	movs	r3, #12
 8003464:	4638      	mov	r0, r7
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	f000 f84c 	bl	8003504 <__malloc_unlock>
 800346c:	e7a1      	b.n	80033b2 <_malloc_r+0x22>
 800346e:	6025      	str	r5, [r4, #0]
 8003470:	e7de      	b.n	8003430 <_malloc_r+0xa0>
 8003472:	bf00      	nop
 8003474:	20000290 	.word	0x20000290

08003478 <_realloc_r>:
 8003478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800347c:	4680      	mov	r8, r0
 800347e:	4614      	mov	r4, r2
 8003480:	460e      	mov	r6, r1
 8003482:	b921      	cbnz	r1, 800348e <_realloc_r+0x16>
 8003484:	4611      	mov	r1, r2
 8003486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800348a:	f7ff bf81 	b.w	8003390 <_malloc_r>
 800348e:	b92a      	cbnz	r2, 800349c <_realloc_r+0x24>
 8003490:	f7ff ff16 	bl	80032c0 <_free_r>
 8003494:	4625      	mov	r5, r4
 8003496:	4628      	mov	r0, r5
 8003498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800349c:	f000 f838 	bl	8003510 <_malloc_usable_size_r>
 80034a0:	4284      	cmp	r4, r0
 80034a2:	4607      	mov	r7, r0
 80034a4:	d802      	bhi.n	80034ac <_realloc_r+0x34>
 80034a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034aa:	d812      	bhi.n	80034d2 <_realloc_r+0x5a>
 80034ac:	4621      	mov	r1, r4
 80034ae:	4640      	mov	r0, r8
 80034b0:	f7ff ff6e 	bl	8003390 <_malloc_r>
 80034b4:	4605      	mov	r5, r0
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d0ed      	beq.n	8003496 <_realloc_r+0x1e>
 80034ba:	42bc      	cmp	r4, r7
 80034bc:	4622      	mov	r2, r4
 80034be:	4631      	mov	r1, r6
 80034c0:	bf28      	it	cs
 80034c2:	463a      	movcs	r2, r7
 80034c4:	f7ff fed4 	bl	8003270 <memcpy>
 80034c8:	4631      	mov	r1, r6
 80034ca:	4640      	mov	r0, r8
 80034cc:	f7ff fef8 	bl	80032c0 <_free_r>
 80034d0:	e7e1      	b.n	8003496 <_realloc_r+0x1e>
 80034d2:	4635      	mov	r5, r6
 80034d4:	e7df      	b.n	8003496 <_realloc_r+0x1e>
	...

080034d8 <_sbrk_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	2300      	movs	r3, #0
 80034dc:	4d05      	ldr	r5, [pc, #20]	; (80034f4 <_sbrk_r+0x1c>)
 80034de:	4604      	mov	r4, r0
 80034e0:	4608      	mov	r0, r1
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	f7fd ff74 	bl	80013d0 <_sbrk>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d102      	bne.n	80034f2 <_sbrk_r+0x1a>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	b103      	cbz	r3, 80034f2 <_sbrk_r+0x1a>
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
 80034f4:	20000298 	.word	0x20000298

080034f8 <__malloc_lock>:
 80034f8:	4801      	ldr	r0, [pc, #4]	; (8003500 <__malloc_lock+0x8>)
 80034fa:	f000 b811 	b.w	8003520 <__retarget_lock_acquire_recursive>
 80034fe:	bf00      	nop
 8003500:	2000029c 	.word	0x2000029c

08003504 <__malloc_unlock>:
 8003504:	4801      	ldr	r0, [pc, #4]	; (800350c <__malloc_unlock+0x8>)
 8003506:	f000 b80c 	b.w	8003522 <__retarget_lock_release_recursive>
 800350a:	bf00      	nop
 800350c:	2000029c 	.word	0x2000029c

08003510 <_malloc_usable_size_r>:
 8003510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003514:	1f18      	subs	r0, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	bfbc      	itt	lt
 800351a:	580b      	ldrlt	r3, [r1, r0]
 800351c:	18c0      	addlt	r0, r0, r3
 800351e:	4770      	bx	lr

08003520 <__retarget_lock_acquire_recursive>:
 8003520:	4770      	bx	lr

08003522 <__retarget_lock_release_recursive>:
 8003522:	4770      	bx	lr

08003524 <_init>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr

08003530 <_fini>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr
